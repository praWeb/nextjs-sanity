/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_sanity_groq-store_dist_browser_groq-store_js"],{

/***/ "./node_modules/@sanity/groq-store/dist/browser/groq-store.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sanity/groq-store/dist/browser/groq-store.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("function e(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}var r=e(__webpack_require__(/*! groq */ \"./node_modules/groq/lib/groq.js\")),t=e(__webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\")),n=__webpack_require__(/*! throttle-debounce */ \"./node_modules/throttle-debounce/cjs/index.js\"),o=__webpack_require__(/*! groq-js */ \"./node_modules/groq-js/dist/groq-js.esm.js\"),i=__webpack_require__(/*! mendoza */ \"./node_modules/mendoza/lib/esm/index.js\");function u(){return(u=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}function c(e,r,t){var n,o=r.token,i=new e(\"https://\"+r.projectId+\".api.sanity.io/v1/data/listen/\"+r.dataset+\"?query=*&effectFormat=mendoza\",{withCredentials:!0,headers:o?{Authorization:\"Bearer \"+o}:void 0});return i.addEventListener(\"welcome\",t.open,!1),i.addEventListener(\"mutation\",(n=t.next,function(e){var r;try{r=JSON.parse(e.data)}catch(e){return}n(r)}),!1),i.addEventListener(\"channelError\",function(e){var r;i.close();try{r=JSON.parse(e.data)}catch(e){return void t.error(new Error(\"Unknown error parsing listener message\"))}t.error(new Error(r.message||r.error||\"Listener returned HTTP \"+r.statusCode))},!1),i.addEventListener(\"error\",function(){var e=\"undefined\"!=typeof window&&window.location.origin;t.error(new Error(\"Error establishing listener - check that the project ID and dataset are correct\"+(e?\", and that the CORS-origin (\"+e+\") is allowed\":\"\")))},!1),{unsubscribe:function(){return Promise.resolve(i.close())}}}function s(e){return e._id.startsWith(\"drafts.\")?e._id.slice(7):e._id}function a(e,r){var t=u({},e);return delete t._rev,i.applyPatch(t,r)}function f(){return Promise.resolve()}function d(){var e,r,t=(e=[\"*[_id == $id][0]\"],r||(r=e.slice(0)),e.raw=r,e);return d=function(){return t},t}function v(e,r,t){if(!e.s){if(t instanceof h){if(!t.s)return void(t.o=v.bind(null,e,r));1&r&&(r=t.s),t=t.v}if(t&&t.then)return void t.then(v.bind(null,e,r),v.bind(null,e,2));e.s=r,e.v=t;var n=e.o;n&&n(e)}}var h=function(){function e(){}return e.prototype.then=function(r,t){var n=new e,o=this.s;if(o){var i=1&o?r:t;if(i){try{v(n,1,i(this.v))}catch(e){v(n,2,e)}return n}return this}return this.o=function(e){try{var o=e.v;1&e.s?v(n,1,r?r(o):o):t?v(n,1,t(o)):v(n,2,o)}catch(e){v(n,2,e)}},n},e}();function l(e){return e instanceof h&&1&e.s}var m=function(e){var r=e.projectId,t=e.dataset,n=e.token,o=e.documentLimit;try{return Promise.resolve(fetch(\"https://\"+r+\".api.sanity.io/v1/data/export/\"+t,{credentials:\"include\",headers:n?{Authorization:\"Bearer \"+n}:void 0})).then(function(e){function r(r){var t,n,i=function(e){if(!e)throw new Error(\"Failed to read body from response\");var r,t=!1;function n(){t=!0,r&&r.cancel()}return new ReadableStream({start:function(o){r=e.getReader();var i=new TextDecoder,u=\"\";r.read().then(function e(c){try{if(c.done)return t?Promise.resolve():0===(u=u.trim()).length?(o.close(),Promise.resolve()):(o.enqueue(JSON.parse(u)),o.close(),Promise.resolve());for(var s=(u+=i.decode(c.value,{stream:!0})).split(\"\\n\"),a=0;a<s.length-1;++a){var f=s[a].trim();if(0===f.length)return Promise.resolve();try{o.enqueue(JSON.parse(f))}catch(e){return o.error(e),n(),Promise.resolve()}}if(u=s[s.length-1],!r)return Promise.resolve();var d=function(t,n){try{var o=Promise.resolve(r.read()).then(function(r){e(r)})}catch(e){return n(e)}return o&&o.then?o.then(void 0,n):o}(0,function(e){o.error(e)});return Promise.resolve(d&&d.then?d.then(function(){}):void 0)}catch(e){return Promise.reject(e)}}).catch(function(e){return o.error(e)})},cancel:n})}(e.body).getReader(),u=[],c=function(e,r){var t;do{var n=e();if(n&&n.then){if(!l(n)){t=!0;break}n=n.v}var o=r();if(l(o)&&(o=o.v),!o)return n}while(!o.then);var i=new h,u=v.bind(null,i,2);return(t?n.then(c):o.then(s)).then(void 0,u),i;function c(t){for(n=t;l(o=r())&&(o=o.v),o;){if(o.then)return void o.then(s).then(void 0,u);if((n=e())&&n.then){if(!l(n))return void n.then(c).then(void 0,u);n=n.v}}v(i,1,n)}function s(t){if(t){do{if((n=e())&&n.then){if(!l(n))return void n.then(c).then(void 0,u);n=n.v}if(l(t=r())&&(t=t.v),!t)return void v(i,1,n)}while(!t.then);t.then(s).then(void 0,u)}else v(i,1,n)}}(function(){return Promise.resolve(i.read()).then(function(e){if(function(e){return!!e&&\"error\"in e&&\"object\"==typeof e.error&&null!==e.error&&\"description\"in e.error&&\"string\"==typeof e.error.description&&!(\"_id\"in e)}(n=(t=e).value))throw new Error(\"Error streaming dataset: \"+n.error);if(n&&!n._id.startsWith(\"_.\")&&u.push(n),o&&u.length>o)throw i.cancel(\"Reached document limit\"),new Error(\"Error streaming dataset: Reached limit of \"+o+\" documents\")})},function(){return!t.done});return c&&c.then?c.then(function(e){return u}):u}var t=function(){if(200!==e.status)return Promise.resolve(e.json()).then(function(e){throw new Error(\"Error streaming dataset: \"+(\"object\"==typeof(r=e)&&\"error\"in r&&\"message\"in r?r.message||r.error:\"<unknown error>\"));var r})}();return t&&t.then?t.then(r):r()})}catch(e){return Promise.reject(e)}};exports.groq=r,exports.groqStore=function(e){if(function(){var e=[\"EventSource\",\"ReadableStream\",\"fetch\"].filter(function(e){return!(e in window)});if(e.length>0)throw new Error(\"Browser not supported. Missing browser APIs: \"+e.join(\", \"))}(),e.token)throw new Error(\"`token` option not currently supported in browser\");return function(e,i){var v,h=function(e,r){try{return Promise.resolve(l()).then(function(){var t=o.parse(e);return Promise.resolve(o.evaluate(t,{dataset:m,params:r})).then(function(e){return e.get()})})}catch(e){return Promise.reject(e)}},l=function(){try{return v||(v=function(e,r,t){var n=t.getDocuments,o=t.EventSource,i=e.projectId,d=e.dataset,v=e.overlayDrafts,h=e.documentLimit;if(!e.listen)return{unsubscribe:f,loaded:n({projectId:i,dataset:d,documentLimit:h}).then(j).then(f)};var l,m,p,w,b,g,y=new Map,P=[],E=new Promise(function(e,r){m=e,p=r});return{unsubscribe:c(o,e,{next:function(e){l?(function(e){if(e.effects&&!e.documentId.startsWith(\"_.\")){var r=y.get(e.documentId)||null;!function(e,r){var t=y.get(e),n=l||[],o=t?n.indexOf(t):-1;-1===o&&r?(n.push(r),y.set(e,r)):r?(n.splice(o,1,r),y.set(e,r)):(n.splice(o,1),y.delete(e))}(e.documentId,a(r,e.effects.apply))}}(e),function(e,r){clearTimeout(g),b!==r.transactionId&&w?(j(w),b=void 0):(b=r.transactionId,w=e.slice()),g=setTimeout(j,25,e.slice())}(l,e)):P.push(e)},open:function(){try{return Promise.resolve(n({projectId:i,dataset:d,documentLimit:h})).then(function(e){(l=function(e,r){var t=new Map;return r.forEach(function(e){var r=t.get(e.documentId)||[];r.push(e),t.set(e.documentId,r)}),t.forEach(function(r,t){var n=e.find(function(e){return e._id===t});if(n){var o=!1,i=n;r.forEach(function(e){(o=o||e.previousRev===n._rev)&&e.effects&&(i=a(i,e.effects.apply))}),e.splice(e.indexOf(n),1,i)}else console.warn(\"Received mutation for missing document %s\",t)}),e}(e,P)).forEach(function(e){return y.set(e._id,e)}),j(l),m()})}catch(e){return Promise.reject(e)}},error:function(e){return p(e)}}).unsubscribe,loaded:E};function j(e){w=void 0,g=void 0,b=void 0,r(v?function(e){var r=new Map;return e.forEach(function(e){var t=r.get(s(e));e._id.startsWith(\"drafts.\")?r.set(s(e),function(e){return u({},e,{_id:s(e)})}(e)):t||r.set(e._id,e)}),Array.from(r.values())}(e):e)}}(e,function(e){m=e,p()},i)),Promise.resolve(v.loaded).then(function(){})}catch(e){return Promise.reject(e)}},m=[],p=n.throttle(e.subscriptionThrottleMs||50,function(){w.forEach(b)}),w=[];function b(e){return h(e.query,e.params).then(function(r){\"previousResult\"in e&&t(e.previousResult,r)||(e.previousResult=r,e.callback(void 0,r))}).catch(function(r){e.callback(r)})}return{query:h,getDocument:function(e){try{return Promise.resolve(l()).then(function(){return h(r(d()),{id:e})})}catch(e){return Promise.reject(e)}},getDocuments:function(e){try{return Promise.resolve(l()).then(function(){var r=e.map(function(e){return'*[_id == \"'+e+'\"][0]'}).join(\",\\n\");return h(\"[\"+r+\"]\")})}catch(e){return Promise.reject(e)}},subscribe:function(r,t,n){if(!e.listen)throw new Error(\"Cannot use `subscribe()` without `listen: true`\");var o={query:r,params:t,callback:n};w.push(o);var i=!1;return b(o),{unsubscribe:function(){return i||(i=!0,w.splice(w.indexOf(o),1)),Promise.resolve()}}},close:function(){return p.cancel(),v?v.unsubscribe():Promise.resolve()}}}(e,{EventSource:window.EventSource,getDocuments:m})};\n//# sourceMappingURL=groq-store.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sanity/groq-store/dist/browser/groq-store.js\n");

/***/ }),

/***/ "./node_modules/fast-deep-equal/index.js":
/*!***********************************************!*\
  !*** ./node_modules/fast-deep-equal/index.js ***!
  \***********************************************/
/***/ (function(module) {

"use strict";
eval("\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Zhc3QtZGVlcC1lcXVhbC9pbmRleC5qcz82OTRiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFdBQVc7QUFDakM7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsV0FBVztBQUMvQjs7QUFFQSxvQkFBb0IsV0FBVztBQUMvQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Zhc3QtZGVlcC1lcXVhbC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gZG8gbm90IGVkaXQgLmpzIGZpbGVzIGRpcmVjdGx5IC0gZWRpdCBzcmMvaW5kZXguanN0XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICBpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGxlbmd0aCwgaSwga2V5cztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuXG5cbiAgICBpZiAoYS5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKSByZXR1cm4gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGEuZmxhZ3MgPT09IGIuZmxhZ3M7XG4gICAgaWYgKGEudmFsdWVPZiAhPT0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mKSByZXR1cm4gYS52YWx1ZU9mKCkgPT09IGIudmFsdWVPZigpO1xuICAgIGlmIChhLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHRydWUgaWYgYm90aCBOYU4sIGZhbHNlIG90aGVyd2lzZVxuICByZXR1cm4gYSE9PWEgJiYgYiE9PWI7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fast-deep-equal/index.js\n");

/***/ }),

/***/ "./node_modules/groq-js/dist/groq-js.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/groq-js/dist/groq-js.esm.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluate\": function() { return /* binding */ evaluate; },\n/* harmony export */   \"parse\": function() { return /* binding */ parse$1; }\n/* harmony export */ });\nclass MarkProcessor {\n  constructor(visitor, string, marks) {\n    this.visitor = visitor;\n    this.string = string;\n    this.marks = marks;\n    this.index = 0;\n  }\n\n  hasMark(pos) {\n    if (pos === void 0) {\n      pos = 0;\n    }\n\n    return this.index + pos < this.marks.length;\n  }\n\n  getMark(pos) {\n    if (pos === void 0) {\n      pos = 0;\n    }\n\n    return this.marks[this.index + pos];\n  }\n\n  shift() {\n    this.index += 1;\n  }\n\n  process() {\n    var mark = this.marks[this.index];\n    this.shift();\n    var func = this.visitor[mark.name];\n    if (!func) throw new Error('Unknown handler: ' + mark.name);\n    return func.call(this.visitor, this, mark);\n  }\n\n  processString() {\n    this.shift();\n    return this.processStringEnd();\n  }\n\n  processStringEnd() {\n    var prev = this.marks[this.index - 1];\n    var curr = this.marks[this.index];\n    this.shift();\n    return this.string.slice(prev.position, curr.position);\n  }\n\n}\n\nfunction _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol !== \"undefined\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}\n\nfunction _AwaitValue(value) {\n  this.wrapped = value;\n}\n\nfunction _AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof _AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(key === \"return\" ? \"return\" : \"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true\n        });\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false\n        });\n        break;\n    }\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen.return !== \"function\") {\n    this.return = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\n_AsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\n_AsyncGenerator.prototype.throw = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\n_AsyncGenerator.prototype.return = function (arg) {\n  return this._invoke(\"return\", arg);\n};\n\nfunction _wrapAsyncGenerator(fn) {\n  return function () {\n    return new _AsyncGenerator(fn.apply(this, arguments));\n  };\n}\n\nfunction _awaitAsyncGenerator(value) {\n  return new _AwaitValue(value);\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\n/**\r\n * Returns the type of the value.\r\n */\nfunction getType(data) {\n  if (data === null || typeof data === 'undefined') return 'null';\n  if (Array.isArray(data)) return 'array';\n  if (data instanceof Range) return 'range';\n  if (data instanceof Pair) return 'pair';\n  if (data instanceof Path) return 'path';\n  return typeof data;\n}\nclass StaticValue {\n  constructor(data) {\n    this.data = data;\n  }\n\n  getType() {\n    return getType(this.data);\n  }\n\n  get() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.data;\n    })();\n  }\n\n  [Symbol.asyncIterator]() {\n    if (Array.isArray(this.data)) {\n      return function* (data) {\n        for (var _iterator4 = _createForOfIteratorHelperLoose(data), _step4; !(_step4 = _iterator4()).done;) {\n          var element = _step4.value;\n          yield new StaticValue(element);\n        }\n      }(this.data);\n    } else {\n      throw new Error('Cannot iterate over: ' + this.getType());\n    }\n  }\n\n  getBoolean() {\n    return typeof this.data === 'boolean' && this.data === true;\n  }\n\n}\nvar NULL_VALUE = /*#__PURE__*/new StaticValue(null);\nvar TRUE_VALUE = /*#__PURE__*/new StaticValue(true);\nvar FALSE_VALUE = /*#__PURE__*/new StaticValue(false);\n/**\r\n * A StreamValue accepts a generator which yields values.\r\n */\n\nclass StreamValue {\n  constructor(generator) {\n    this.generator = generator;\n    this.ticker = null;\n    this.isDone = false;\n    this.data = [];\n  }\n\n  getType() {\n    return 'array';\n  }\n\n  get() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var result = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(_this3), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          var value = _value;\n          result.push(yield value.get());\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return result;\n    })();\n  }\n\n  [Symbol.asyncIterator]() {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      var i = 0;\n\n      while (true) {\n        for (; i < _this.data.length; i++) {\n          yield _this.data[i];\n        }\n\n        if (_this.isDone) return;\n        yield _awaitAsyncGenerator(_this._nextTick());\n      }\n    })();\n  }\n\n  getBoolean() {\n    return false;\n  }\n\n  _nextTick() {\n    var _this4 = this;\n\n    if (this.ticker) return this.ticker;\n    var currentResolver;\n\n    var setupTicker = () => {\n      this.ticker = new Promise(resolve => {\n        currentResolver = resolve;\n      });\n    };\n\n    var tick = () => {\n      currentResolver();\n      setupTicker();\n    };\n\n    var fetch = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n\n        var _iteratorError2;\n\n        try {\n          for (var _iterator2 = _asyncIterator(_this4.generator()), _step2, _value2; _step2 = yield _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n            var value = _value2;\n\n            _this4.data.push(value);\n\n            tick();\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              yield _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        _this4.isDone = true;\n        tick();\n      });\n\n      return function fetch() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    setupTicker();\n    fetch();\n    return this.ticker;\n  }\n\n}\nclass MapperValue {\n  constructor(value) {\n    this.value = value;\n  }\n\n  getType() {\n    return 'array';\n  }\n\n  get() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this5.value.get();\n    })();\n  }\n\n  [Symbol.asyncIterator]() {\n    var value = this.value;\n    var iterator = value[Symbol.asyncIterator];\n    return iterator.call(this.value);\n  }\n\n  getBoolean() {\n    return false;\n  }\n\n}\nclass Range {\n  constructor(left, right, exclusive) {\n    this.left = left;\n    this.right = right;\n    this.exclusive = exclusive;\n  }\n\n  static isConstructible(leftType, rightType) {\n    if (leftType === rightType) {\n      if (leftType === 'number') return true;\n      if (leftType === 'string') return true;\n      if (leftType === 'boolean') return true;\n    }\n\n    return false;\n  }\n\n  isExclusive() {\n    return this.exclusive;\n  }\n\n  toJSON() {\n    return [this.left, this.right];\n  }\n\n}\nclass Pair {\n  constructor(first, second) {\n    this.first = first;\n    this.second = second;\n  }\n\n  toJSON() {\n    return [this.first, this.second];\n  }\n\n}\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction pathRegExp(pattern) {\n  var re = [];\n\n  for (var _iterator5 = _createForOfIteratorHelperLoose(pattern.split('.')), _step5; !(_step5 = _iterator5()).done;) {\n    var part = _step5.value;\n\n    if (part === '*') {\n      re.push('[^.]+');\n    } else if (part === '**') {\n      re.push('.*');\n    } else {\n      re.push(escapeRegExp(part));\n    }\n  }\n\n  return new RegExp(\"^\" + re.join('.') + \"$\");\n}\n\nclass Path {\n  constructor(pattern) {\n    this.pattern = pattern;\n    this.patternRe = pathRegExp(pattern);\n  }\n\n  matches(str) {\n    return this.patternRe.test(str);\n  }\n\n  toJSON() {\n    return this.pattern;\n  }\n\n}\nfunction fromNumber(num) {\n  if (Number.isFinite(num)) {\n    return new StaticValue(num);\n  } else {\n    return NULL_VALUE;\n  }\n}\n\nfunction isIterator(obj) {\n  return obj && typeof obj.next === 'function';\n}\n\nfunction fromJS(val) {\n  if (isIterator(val)) {\n    return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n\n      var _iteratorError3;\n\n      try {\n        for (var _iterator3 = _asyncIterator(val), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n          var value = _value3;\n          yield new StaticValue(value);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            yield _awaitAsyncGenerator(_iterator3.return());\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }));\n  } else if (val === null || val === undefined) {\n    return NULL_VALUE;\n  } else {\n    return new StaticValue(val);\n  }\n}\n\nvar TYPE_ORDER = {\n  number: 1,\n  string: 2,\n  boolean: 3\n};\nfunction partialCompare(a, b) {\n  var aType = getType(a);\n  var bType = getType(b);\n  if (aType !== bType) return null;\n\n  switch (aType) {\n    case 'number':\n    case 'boolean':\n      return a - b;\n\n    case 'string':\n      return a < b ? -1 : a > b ? 1 : 0;\n  }\n\n  return null;\n}\nfunction totalCompare(a, b) {\n  var aType = getType(a);\n  var bType = getType(b);\n  var aTypeOrder = TYPE_ORDER[aType] || 100;\n  var bTypeOrder = TYPE_ORDER[bType] || 100;\n\n  if (aTypeOrder !== bTypeOrder) {\n    return aTypeOrder - bTypeOrder;\n  }\n\n  var result = partialCompare(a, b);\n  if (result === null) result = 0;\n  return result;\n}\n\nfunction hasReference(value, id) {\n  switch (getType(value)) {\n    case 'array':\n      for (var _iterator3 = _createForOfIteratorHelperLoose(value), _step3; !(_step3 = _iterator3()).done;) {\n        var v = _step3.value;\n        if (hasReference(v, id)) return true;\n      }\n\n      break;\n\n    case 'object':\n      if (value._ref === id) return true;\n\n      for (var _i = 0, _Object$values = Object.values(value); _i < _Object$values.length; _i++) {\n        var _v = _Object$values[_i];\n        if (hasReference(_v, id)) return true;\n      }\n\n      break;\n  }\n\n  return false;\n}\n\nfunction countUTF8(str) {\n  var count = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i);\n\n    if (code >= 0xd800 && code <= 0xdbff) {\n      // High surrogate. Don't count this.\n      // By only counting the low surrogate we will correctly\n      // count the number of UTF-8 code points.\n      continue;\n    }\n\n    count++;\n  }\n\n  return count;\n}\n\nvar functions = {};\n\nfunctions.coalesce = /*#__PURE__*/function () {\n  var _coalesce = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {\n    for (var _iterator4 = _createForOfIteratorHelperLoose(args), _step4; !(_step4 = _iterator4()).done;) {\n      var arg = _step4.value;\n      var value = yield execute(arg, scope);\n      if (value.getType() !== 'null') return value;\n    }\n\n    return NULL_VALUE;\n  });\n\n  function coalesce(_x, _x2, _x3) {\n    return _coalesce.apply(this, arguments);\n  }\n\n  return coalesce;\n}();\n\nfunctions.count = /*#__PURE__*/function () {\n  var _count = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {\n    var inner = yield execute(args[0], scope);\n    if (inner.getType() !== 'array') return NULL_VALUE;\n    var num = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(inner), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        var _ = _value;\n        num++;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          yield _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return new StaticValue(num);\n  });\n\n  function count(_x4, _x5, _x6) {\n    return _count.apply(this, arguments);\n  }\n\n  return count;\n}();\n\nfunctions.count.arity = 1;\n\nfunctions.defined = /*#__PURE__*/function () {\n  var _defined = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {\n    var inner = yield execute(args[0], scope);\n    return inner.getType() === 'null' ? FALSE_VALUE : TRUE_VALUE;\n  });\n\n  function defined(_x7, _x8, _x9) {\n    return _defined.apply(this, arguments);\n  }\n\n  return defined;\n}();\n\nfunctions.defined.arity = 1;\n\nfunctions.identity = /*#__PURE__*/function () {\n  var _identity = /*#__PURE__*/_asyncToGenerator(function* (args) {\n    return new StaticValue('me');\n  });\n\n  function identity(_x10) {\n    return _identity.apply(this, arguments);\n  }\n\n  return identity;\n}();\n\nfunctions.identity.arity = 0;\n\nfunctions.length = /*#__PURE__*/function () {\n  var _length = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {\n    var inner = yield execute(args[0], scope);\n\n    if (inner.getType() === 'string') {\n      var data = yield inner.get();\n      return fromNumber(countUTF8(data));\n    }\n\n    return NULL_VALUE;\n  });\n\n  function length(_x11, _x12, _x13) {\n    return _length.apply(this, arguments);\n  }\n\n  return length;\n}();\n\nfunctions.length.arity = 1;\n\nfunctions.path = /*#__PURE__*/function () {\n  var _path = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {\n    var inner = yield execute(args[0], scope);\n    if (inner.getType() !== 'string') return NULL_VALUE;\n    var str = yield inner.get();\n    return new StaticValue(new Path(str));\n  });\n\n  function path(_x14, _x15, _x16) {\n    return _path.apply(this, arguments);\n  }\n\n  return path;\n}();\n\nfunctions.path.arity = 1;\n\nfunctions.select = /*#__PURE__*/function () {\n  var _select = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {\n    // First check if everything is valid:\n    var seenFallback = false;\n\n    for (var _iterator5 = _createForOfIteratorHelperLoose(args), _step5; !(_step5 = _iterator5()).done;) {\n      var arg = _step5.value;\n      if (seenFallback) return NULL_VALUE;\n\n      if (arg.type === 'Pair') ; else {\n        seenFallback = true;\n      }\n    }\n\n    for (var _iterator6 = _createForOfIteratorHelperLoose(args), _step6; !(_step6 = _iterator6()).done;) {\n      var _arg = _step6.value;\n\n      if (_arg.type === 'Pair') {\n        var cond = yield execute(_arg.left, scope);\n\n        if (cond.getBoolean()) {\n          return yield execute(_arg.right, scope);\n        }\n      } else {\n        return yield execute(_arg, scope);\n      }\n    }\n\n    return NULL_VALUE;\n  });\n\n  function select(_x17, _x18, _x19) {\n    return _select.apply(this, arguments);\n  }\n\n  return select;\n}();\n\nfunctions.references = /*#__PURE__*/function () {\n  var _references = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {\n    var idValue = yield execute(args[0], scope);\n    if (idValue.getType() !== 'string') return FALSE_VALUE;\n    var id = yield idValue.get();\n    var scopeValue = scope.value;\n    return hasReference(scopeValue, id) ? TRUE_VALUE : FALSE_VALUE;\n  });\n\n  function references(_x20, _x21, _x22) {\n    return _references.apply(this, arguments);\n  }\n\n  return references;\n}();\n\nfunctions.references.arity = 1;\n\nfunctions.round = /*#__PURE__*/function () {\n  var _round = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {\n    var value = yield execute(args[0], scope);\n    if (value.getType() !== 'number') return NULL_VALUE;\n    var num = yield value.get();\n    var prec = 0;\n\n    if (args.length === 2) {\n      var precValue = yield execute(args[1], scope);\n      if (precValue.getType() !== 'number') return NULL_VALUE;\n      prec = yield precValue.get();\n    }\n\n    if (prec === 0) {\n      return fromNumber(Math.round(num));\n    } else {\n      return fromNumber(Number(num.toFixed(prec)));\n    }\n  });\n\n  function round(_x23, _x24, _x25) {\n    return _round.apply(this, arguments);\n  }\n\n  return round;\n}();\n\nfunctions.round.arity = count => count >= 1 && count <= 2;\n\nfunctions.now = /*#__PURE__*/function () {\n  var _now = /*#__PURE__*/_asyncToGenerator(function* (args, scope) {\n    return new StaticValue(scope.timestamp);\n  });\n\n  function now(_x26, _x27) {\n    return _now.apply(this, arguments);\n  }\n\n  return now;\n}();\n\nfunctions.now.arity = 0;\nvar pipeFunctions = {};\n\npipeFunctions.order = /*#__PURE__*/function () {\n  var _order = /*#__PURE__*/_asyncToGenerator(function* (base, args, scope, execute) {\n    // This is a workaround for https://github.com/rpetrich/babel-plugin-transform-async-to-promises/issues/59\n    yield true;\n    if (base.getType() !== 'array') return NULL_VALUE;\n    var mappers = [];\n    var directions = [];\n    var n = 0;\n\n    for (var _iterator7 = _createForOfIteratorHelperLoose(args), _step7; !(_step7 = _iterator7()).done;) {\n      var mapper = _step7.value;\n      var direction = 'asc';\n\n      if (mapper.type === 'Desc') {\n        direction = 'desc';\n        mapper = mapper.base;\n      } else if (mapper.type === 'Asc') {\n        mapper = mapper.base;\n      }\n\n      mappers.push(mapper);\n      directions.push(direction);\n      n++;\n    }\n\n    var aux = [];\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n\n    var _iteratorError2;\n\n    try {\n      for (var _iterator2 = _asyncIterator(base), _step2, _value2; _step2 = yield _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n        var value = _value2;\n        var newScope = scope.createNested(value);\n        var tuple = [yield value.get()];\n\n        for (var i = 0; i < n; i++) {\n          var result = yield execute(mappers[i], newScope);\n          tuple.push(yield result.get());\n        }\n\n        aux.push(tuple);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          yield _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    aux.sort((aTuple, bTuple) => {\n      for (var _i2 = 0; _i2 < n; _i2++) {\n        var c = totalCompare(aTuple[_i2 + 1], bTuple[_i2 + 1]);\n        if (directions[_i2] === 'desc') c = -c;\n        if (c !== 0) return c;\n      }\n\n      return 0;\n    });\n    return new StaticValue(aux.map(v => v[0]));\n  });\n\n  function order(_x28, _x29, _x30, _x31) {\n    return _order.apply(this, arguments);\n  }\n\n  return order;\n}();\n\npipeFunctions.order.arity = count => count >= 1;\n\nfunction State() {}\n\nfunction Step(token, position) {\n  this.token = token;\n  this.position = position;\n  this.nextFrames = [];\n  this.acceptedContexts = [];\n  this.callers = {};\n}\n\nStep.prototype.hasNextFrames = function hasNextFrames() {\n  return this.nextFrames.length > 0;\n};\n\nStep.prototype.addNextFrame = function addNextFrame(frame) {\n  this.nextFrames.push(frame);\n};\n\nStep.prototype.wasAccepted = function wasAccepted() {\n  return this.acceptedContexts.length > 0;\n};\n\nStep.prototype.addAccept = function addAccept(context) {\n  this.acceptedContexts.push(context);\n};\n\nStep.prototype.addMark = function addMark(name, context, nextState) {\n  var mark = {\n    type: \"mark\",\n    name: name,\n    position: this.position\n  };\n  var marks = context.marks ? {\n    type: \"concat\",\n    left: context.marks,\n    right: mark\n  } : mark;\n  var nextContext = new Context(context.caller, marks);\n  var nextFrame = new Frame(nextContext);\n  nextState.p(this, nextFrame);\n  addNextFrame(this, nextFrame);\n};\n\nStep.prototype.startCall = function startCall(ruleId) {\n  var caller = this.callers[ruleId];\n\n  if (!caller) {\n    caller = new Caller();\n    this.callers[ruleId] = caller;\n    var callContext = new Context(caller, null);\n    var callFrame = new Frame(callContext);\n    var states = ruleInitialStates[ruleId];\n\n    for (var i = 0; i < states.length; i++) {\n      var state = states[i];\n      state.p(this, callFrame);\n    }\n\n    addNextFrame(this, callFrame);\n  }\n\n  return caller;\n};\n\nStep.prototype.returnCall = function returnCall(ruleId, frame) {\n  // TODO: Implement proper grouping\n  var caller = frame.context.caller;\n  var returns = caller.returns;\n\n  for (var i = 0; i < returns.length; i++) {\n    var ret = returns[i];\n    var callerContext = ret[0];\n    var state = ret[1];\n    var leftMarks = callerContext.marks;\n    var rightMarks = frame.context.marks;\n    var marks = leftMarks && rightMarks ? {\n      type: \"concat\",\n      left: callerContext.marks,\n      right: frame.context.marks\n    } : leftMarks || rightMarks;\n    var context = new Context(callerContext.caller, marks);\n    var nextFrame = new Frame(context);\n    state.p(this, nextFrame);\n    addNextFrame(this, nextFrame);\n  }\n};\n\nfunction Caller() {\n  this.returns = [];\n}\n\nCaller.prototype.addReturn = function (context, nextState) {\n  this.returns.push([context, nextState]);\n};\n\nfunction Context(caller, marks) {\n  this.caller = caller;\n  this.marks = marks;\n}\n\nfunction Frame(context) {\n  this.context = context;\n  this.nextStates = [];\n}\n\nFrame.prototype.addNextState = function addNextState(state) {\n  this.nextStates.push(state);\n};\n\nFrame.prototype.eachNextState = function eachNextState(fn) {\n  this.nextStates.forEach(fn);\n};\n\nFrame.prototype.hasNextStates = function hasNextStates() {\n  return this.nextStates.length > 0;\n};\n\nFrame.prototype.copy = function copy() {\n  return new Frame(this.context, this.marks);\n};\n\nfunction processToken(token, position, frames) {\n  var step = new Step(token, position);\n\n  for (var i = 0; i < frames.length; i++) {\n    var frame = frames[i];\n    processFrame(step, frame);\n  }\n\n  return step;\n}\n\nfunction processFrame(step, frame) {\n  var newFrame = frame.copy();\n  frame.eachNextState(function (state) {\n    state.p(step, newFrame);\n  });\n  addNextFrame(step, newFrame);\n}\n\nfunction addNextFrame(step, frame) {\n  if (frame.hasNextStates()) {\n    step.addNextFrame(frame);\n  }\n}\n\nfunction flattenMarks(marks) {\n  if (!marks) return [];\n  var queue = [marks];\n  var result = [];\n\n  while (queue.length) {\n    var m = queue.shift();\n\n    if (m.type === \"concat\") {\n      queue.unshift(m.left, m.right);\n    } else if (m.type === \"mark\") {\n      result.push(m);\n    } else {\n      throw new Error(\"unknown mark type: \" + m.type);\n    }\n  }\n\n  return result;\n}\n\nfunction parse(input) {\n  var frames = initialFrames;\n  var i = 0;\n\n  for (; i < input.length; i++) {\n    var token = input.charCodeAt(i);\n    var step = processToken(token, i, frames);\n\n    if (!step.hasNextFrames()) {\n      return {\n        type: \"error\",\n        position: i\n      };\n    }\n\n    frames = step.nextFrames;\n  }\n\n  step = processToken(null, i, frames);\n\n  if (!step.wasAccepted()) {\n    return {\n      type: \"error\",\n      position: i\n    };\n  }\n\n  var ctx = step.acceptedContexts[0];\n  var marks = flattenMarks(ctx.marks);\n  return {\n    type: \"success\",\n    marks: marks\n  };\n}\nvar state0 = /*#__PURE__*/new State();\nvar state1 = /*#__PURE__*/new State();\nvar state2 = /*#__PURE__*/new State();\nvar state3 = /*#__PURE__*/new State();\nvar state4 = /*#__PURE__*/new State();\nvar state5 = /*#__PURE__*/new State();\nvar state6 = /*#__PURE__*/new State();\nvar state7 = /*#__PURE__*/new State();\nvar state8 = /*#__PURE__*/new State();\nvar state9 = /*#__PURE__*/new State();\nvar state10 = /*#__PURE__*/new State();\nvar state11 = /*#__PURE__*/new State();\nvar state12 = /*#__PURE__*/new State();\nvar state13 = /*#__PURE__*/new State();\nvar state14 = /*#__PURE__*/new State();\nvar state15 = /*#__PURE__*/new State();\nvar state16 = /*#__PURE__*/new State();\nvar state17 = /*#__PURE__*/new State();\nvar state18 = /*#__PURE__*/new State();\nvar state19 = /*#__PURE__*/new State();\nvar state20 = /*#__PURE__*/new State();\nvar state21 = /*#__PURE__*/new State();\nvar state22 = /*#__PURE__*/new State();\nvar state23 = /*#__PURE__*/new State();\nvar state24 = /*#__PURE__*/new State();\nvar state25 = /*#__PURE__*/new State();\nvar state26 = /*#__PURE__*/new State();\nvar state27 = /*#__PURE__*/new State();\nvar state28 = /*#__PURE__*/new State();\nvar state29 = /*#__PURE__*/new State();\nvar state30 = /*#__PURE__*/new State();\nvar state31 = /*#__PURE__*/new State();\nvar state32 = /*#__PURE__*/new State();\nvar state33 = /*#__PURE__*/new State();\nvar state34 = /*#__PURE__*/new State();\nvar state35 = /*#__PURE__*/new State();\nvar state36 = /*#__PURE__*/new State();\nvar state37 = /*#__PURE__*/new State();\nvar state38 = /*#__PURE__*/new State();\nvar state39 = /*#__PURE__*/new State();\nvar state40 = /*#__PURE__*/new State();\nvar state41 = /*#__PURE__*/new State();\nvar state42 = /*#__PURE__*/new State();\nvar state43 = /*#__PURE__*/new State();\nvar state44 = /*#__PURE__*/new State();\nvar state45 = /*#__PURE__*/new State();\nvar state46 = /*#__PURE__*/new State();\nvar state47 = /*#__PURE__*/new State();\nvar state48 = /*#__PURE__*/new State();\nvar state49 = /*#__PURE__*/new State();\nvar state50 = /*#__PURE__*/new State();\nvar state51 = /*#__PURE__*/new State();\nvar state52 = /*#__PURE__*/new State();\nvar state53 = /*#__PURE__*/new State();\nvar state54 = /*#__PURE__*/new State();\nvar state55 = /*#__PURE__*/new State();\nvar state56 = /*#__PURE__*/new State();\nvar state57 = /*#__PURE__*/new State();\nvar state58 = /*#__PURE__*/new State();\nvar state59 = /*#__PURE__*/new State();\nvar state60 = /*#__PURE__*/new State();\nvar state61 = /*#__PURE__*/new State();\nvar state62 = /*#__PURE__*/new State();\nvar state63 = /*#__PURE__*/new State();\nvar state64 = /*#__PURE__*/new State();\nvar state65 = /*#__PURE__*/new State();\nvar state66 = /*#__PURE__*/new State();\nvar state67 = /*#__PURE__*/new State();\nvar state68 = /*#__PURE__*/new State();\nvar state69 = /*#__PURE__*/new State();\nvar state70 = /*#__PURE__*/new State();\nvar state71 = /*#__PURE__*/new State();\nvar state72 = /*#__PURE__*/new State();\nvar state73 = /*#__PURE__*/new State();\nvar state74 = /*#__PURE__*/new State();\nvar state75 = /*#__PURE__*/new State();\nvar state76 = /*#__PURE__*/new State();\nvar state77 = /*#__PURE__*/new State();\nvar state78 = /*#__PURE__*/new State();\nvar state79 = /*#__PURE__*/new State();\nvar state80 = /*#__PURE__*/new State();\nvar state81 = /*#__PURE__*/new State();\nvar state82 = /*#__PURE__*/new State();\nvar state83 = /*#__PURE__*/new State();\nvar state84 = /*#__PURE__*/new State();\nvar state85 = /*#__PURE__*/new State();\nvar state86 = /*#__PURE__*/new State();\nvar state87 = /*#__PURE__*/new State();\nvar state88 = /*#__PURE__*/new State();\nvar state89 = /*#__PURE__*/new State();\nvar state90 = /*#__PURE__*/new State();\nvar state91 = /*#__PURE__*/new State();\nvar state92 = /*#__PURE__*/new State();\nvar state93 = /*#__PURE__*/new State();\nvar state94 = /*#__PURE__*/new State();\nvar state95 = /*#__PURE__*/new State();\nvar state96 = /*#__PURE__*/new State();\nvar state97 = /*#__PURE__*/new State();\nvar state98 = /*#__PURE__*/new State();\nvar state99 = /*#__PURE__*/new State();\nvar state100 = /*#__PURE__*/new State();\nvar state101 = /*#__PURE__*/new State();\nvar state102 = /*#__PURE__*/new State();\nvar state103 = /*#__PURE__*/new State();\nvar state104 = /*#__PURE__*/new State();\nvar state105 = /*#__PURE__*/new State();\nvar state106 = /*#__PURE__*/new State();\nvar state107 = /*#__PURE__*/new State();\nvar state108 = /*#__PURE__*/new State();\nvar state109 = /*#__PURE__*/new State();\nvar state110 = /*#__PURE__*/new State();\nvar state111 = /*#__PURE__*/new State();\nvar state112 = /*#__PURE__*/new State();\nvar state113 = /*#__PURE__*/new State();\nvar state114 = /*#__PURE__*/new State();\nvar state115 = /*#__PURE__*/new State();\nvar state116 = /*#__PURE__*/new State();\nvar state117 = /*#__PURE__*/new State();\nvar state118 = /*#__PURE__*/new State();\nvar state119 = /*#__PURE__*/new State();\nvar state120 = /*#__PURE__*/new State();\nvar state121 = /*#__PURE__*/new State();\nvar state122 = /*#__PURE__*/new State();\nvar state123 = /*#__PURE__*/new State();\nvar state124 = /*#__PURE__*/new State();\nvar state125 = /*#__PURE__*/new State();\nvar state126 = /*#__PURE__*/new State();\nvar state127 = /*#__PURE__*/new State();\nvar state128 = /*#__PURE__*/new State();\nvar state129 = /*#__PURE__*/new State();\nvar state130 = /*#__PURE__*/new State();\nvar state131 = /*#__PURE__*/new State();\nvar state132 = /*#__PURE__*/new State();\nvar state133 = /*#__PURE__*/new State();\nvar state134 = /*#__PURE__*/new State();\nvar state135 = /*#__PURE__*/new State();\nvar state136 = /*#__PURE__*/new State();\nvar state137 = /*#__PURE__*/new State();\nvar state138 = /*#__PURE__*/new State();\nvar state139 = /*#__PURE__*/new State();\nvar state140 = /*#__PURE__*/new State();\nvar state141 = /*#__PURE__*/new State();\nvar state142 = /*#__PURE__*/new State();\nvar state143 = /*#__PURE__*/new State();\nvar state144 = /*#__PURE__*/new State();\nvar state145 = /*#__PURE__*/new State();\nvar state146 = /*#__PURE__*/new State();\nvar state147 = /*#__PURE__*/new State();\nvar state148 = /*#__PURE__*/new State();\nvar state149 = /*#__PURE__*/new State();\nvar state150 = /*#__PURE__*/new State();\nvar state151 = /*#__PURE__*/new State();\nvar state152 = /*#__PURE__*/new State();\nvar state153 = /*#__PURE__*/new State();\nvar state154 = /*#__PURE__*/new State();\nvar state155 = /*#__PURE__*/new State();\nvar state156 = /*#__PURE__*/new State();\nvar state157 = /*#__PURE__*/new State();\nvar state158 = /*#__PURE__*/new State();\nvar state159 = /*#__PURE__*/new State();\nvar state160 = /*#__PURE__*/new State();\nvar state161 = /*#__PURE__*/new State();\nvar state162 = /*#__PURE__*/new State();\nvar state163 = /*#__PURE__*/new State();\nvar state164 = /*#__PURE__*/new State();\nvar state165 = /*#__PURE__*/new State();\nvar state166 = /*#__PURE__*/new State();\nvar state167 = /*#__PURE__*/new State();\nvar state168 = /*#__PURE__*/new State();\nvar state169 = /*#__PURE__*/new State();\nvar state170 = /*#__PURE__*/new State();\nvar state171 = /*#__PURE__*/new State();\nvar state172 = /*#__PURE__*/new State();\nvar state173 = /*#__PURE__*/new State();\nvar state174 = /*#__PURE__*/new State();\nvar state175 = /*#__PURE__*/new State();\nvar state176 = /*#__PURE__*/new State();\nvar state177 = /*#__PURE__*/new State();\nvar state178 = /*#__PURE__*/new State();\nvar state179 = /*#__PURE__*/new State();\nvar state180 = /*#__PURE__*/new State();\nvar state181 = /*#__PURE__*/new State();\nvar state182 = /*#__PURE__*/new State();\nvar state183 = /*#__PURE__*/new State();\nvar state184 = /*#__PURE__*/new State();\nvar state185 = /*#__PURE__*/new State();\nvar state186 = /*#__PURE__*/new State();\nvar state187 = /*#__PURE__*/new State();\nvar state188 = /*#__PURE__*/new State();\nvar state189 = /*#__PURE__*/new State();\nvar state190 = /*#__PURE__*/new State();\nvar state191 = /*#__PURE__*/new State();\nvar state192 = /*#__PURE__*/new State();\nvar state193 = /*#__PURE__*/new State();\nvar state194 = /*#__PURE__*/new State();\nvar state195 = /*#__PURE__*/new State();\nvar state196 = /*#__PURE__*/new State();\nvar state197 = /*#__PURE__*/new State();\nvar state198 = /*#__PURE__*/new State();\nvar state199 = /*#__PURE__*/new State();\nvar state200 = /*#__PURE__*/new State();\nvar state201 = /*#__PURE__*/new State();\nvar state202 = /*#__PURE__*/new State();\nvar state203 = /*#__PURE__*/new State();\nvar state204 = /*#__PURE__*/new State();\nvar state205 = /*#__PURE__*/new State();\nvar state206 = /*#__PURE__*/new State();\nvar state207 = /*#__PURE__*/new State();\nvar state208 = /*#__PURE__*/new State();\nvar state209 = /*#__PURE__*/new State();\nvar state210 = /*#__PURE__*/new State();\nvar state211 = /*#__PURE__*/new State();\nvar state212 = /*#__PURE__*/new State();\nvar state213 = /*#__PURE__*/new State();\nvar state214 = /*#__PURE__*/new State();\nvar state215 = /*#__PURE__*/new State();\nvar state216 = /*#__PURE__*/new State();\nvar state217 = /*#__PURE__*/new State();\nvar state218 = /*#__PURE__*/new State();\nvar state219 = /*#__PURE__*/new State();\nvar state220 = /*#__PURE__*/new State();\nvar state221 = /*#__PURE__*/new State();\nvar state222 = /*#__PURE__*/new State();\nvar state223 = /*#__PURE__*/new State();\nvar state224 = /*#__PURE__*/new State();\nvar state225 = /*#__PURE__*/new State();\nvar state226 = /*#__PURE__*/new State();\nvar state227 = /*#__PURE__*/new State();\nvar state228 = /*#__PURE__*/new State();\nvar state229 = /*#__PURE__*/new State();\nvar state230 = /*#__PURE__*/new State();\nvar state231 = /*#__PURE__*/new State();\nvar state232 = /*#__PURE__*/new State();\nvar state233 = /*#__PURE__*/new State();\nvar state234 = /*#__PURE__*/new State();\nvar state235 = /*#__PURE__*/new State();\nvar state236 = /*#__PURE__*/new State();\nvar state237 = /*#__PURE__*/new State();\nvar state238 = /*#__PURE__*/new State();\nvar state239 = /*#__PURE__*/new State();\nvar state240 = /*#__PURE__*/new State();\nvar state241 = /*#__PURE__*/new State();\nvar state242 = /*#__PURE__*/new State();\nvar state243 = /*#__PURE__*/new State();\nvar state244 = /*#__PURE__*/new State();\nvar state245 = /*#__PURE__*/new State();\nvar state246 = /*#__PURE__*/new State();\nvar state247 = /*#__PURE__*/new State();\nvar state248 = /*#__PURE__*/new State();\nvar state249 = /*#__PURE__*/new State();\nvar state250 = /*#__PURE__*/new State();\nvar state251 = /*#__PURE__*/new State();\nvar state252 = /*#__PURE__*/new State();\nvar state253 = /*#__PURE__*/new State();\nvar state254 = /*#__PURE__*/new State();\nvar state255 = /*#__PURE__*/new State();\nvar state256 = /*#__PURE__*/new State();\nvar state257 = /*#__PURE__*/new State();\nvar state258 = /*#__PURE__*/new State();\nvar state259 = /*#__PURE__*/new State();\nvar state260 = /*#__PURE__*/new State();\nvar state261 = /*#__PURE__*/new State();\nvar state262 = /*#__PURE__*/new State();\nvar state263 = /*#__PURE__*/new State();\nvar state264 = /*#__PURE__*/new State();\nvar state265 = /*#__PURE__*/new State();\nvar state266 = /*#__PURE__*/new State();\nvar state267 = /*#__PURE__*/new State();\nvar state268 = /*#__PURE__*/new State();\nvar state269 = /*#__PURE__*/new State();\nvar state270 = /*#__PURE__*/new State();\nvar state271 = /*#__PURE__*/new State();\nvar state272 = /*#__PURE__*/new State();\nvar state273 = /*#__PURE__*/new State();\nvar state274 = /*#__PURE__*/new State();\nvar state275 = /*#__PURE__*/new State();\nvar state276 = /*#__PURE__*/new State();\nvar state277 = /*#__PURE__*/new State();\nvar state278 = /*#__PURE__*/new State();\nvar state279 = /*#__PURE__*/new State();\nvar state280 = /*#__PURE__*/new State();\nvar state281 = /*#__PURE__*/new State();\nvar state282 = /*#__PURE__*/new State();\nvar state283 = /*#__PURE__*/new State();\nvar state284 = /*#__PURE__*/new State();\nvar state285 = /*#__PURE__*/new State();\nvar state286 = /*#__PURE__*/new State();\nvar state287 = /*#__PURE__*/new State();\nvar state288 = /*#__PURE__*/new State();\nvar state289 = /*#__PURE__*/new State();\nvar state290 = /*#__PURE__*/new State();\nvar state291 = /*#__PURE__*/new State();\nvar state292 = /*#__PURE__*/new State();\nvar state293 = /*#__PURE__*/new State();\nvar state294 = /*#__PURE__*/new State();\nvar state295 = /*#__PURE__*/new State();\nvar state296 = /*#__PURE__*/new State();\nvar state297 = /*#__PURE__*/new State();\nvar state298 = /*#__PURE__*/new State();\nvar state299 = /*#__PURE__*/new State();\nvar state300 = /*#__PURE__*/new State();\nvar state301 = /*#__PURE__*/new State();\nvar state302 = /*#__PURE__*/new State();\nvar state303 = /*#__PURE__*/new State();\nvar state304 = /*#__PURE__*/new State();\nvar state305 = /*#__PURE__*/new State();\nvar state306 = /*#__PURE__*/new State();\nvar state307 = /*#__PURE__*/new State();\nvar state308 = /*#__PURE__*/new State();\nvar state309 = /*#__PURE__*/new State();\nvar state310 = /*#__PURE__*/new State();\nvar state311 = /*#__PURE__*/new State();\nvar state312 = /*#__PURE__*/new State();\nvar state313 = /*#__PURE__*/new State();\nvar state314 = /*#__PURE__*/new State();\nvar state315 = /*#__PURE__*/new State();\nvar state316 = /*#__PURE__*/new State();\nvar state317 = /*#__PURE__*/new State();\nvar state318 = /*#__PURE__*/new State();\nvar state319 = /*#__PURE__*/new State();\nvar state320 = /*#__PURE__*/new State();\nvar state321 = /*#__PURE__*/new State();\nvar state322 = /*#__PURE__*/new State();\nvar state323 = /*#__PURE__*/new State();\nvar state324 = /*#__PURE__*/new State();\nvar state325 = /*#__PURE__*/new State();\nvar state326 = /*#__PURE__*/new State();\nvar state327 = /*#__PURE__*/new State();\nvar state328 = /*#__PURE__*/new State();\nvar state329 = /*#__PURE__*/new State();\nvar state330 = /*#__PURE__*/new State();\nvar state331 = /*#__PURE__*/new State();\nvar state332 = /*#__PURE__*/new State();\nvar state333 = /*#__PURE__*/new State();\nvar state334 = /*#__PURE__*/new State();\nvar state335 = /*#__PURE__*/new State();\nvar state336 = /*#__PURE__*/new State();\nvar state337 = /*#__PURE__*/new State();\nvar state338 = /*#__PURE__*/new State();\nvar state339 = /*#__PURE__*/new State();\nvar state340 = /*#__PURE__*/new State();\nvar state341 = /*#__PURE__*/new State();\nvar state342 = /*#__PURE__*/new State();\nvar state343 = /*#__PURE__*/new State();\nvar state344 = /*#__PURE__*/new State();\nvar state345 = /*#__PURE__*/new State();\nvar state346 = /*#__PURE__*/new State();\nvar state347 = /*#__PURE__*/new State();\nvar state348 = /*#__PURE__*/new State();\nvar state349 = /*#__PURE__*/new State();\nvar state350 = /*#__PURE__*/new State();\nvar state351 = /*#__PURE__*/new State();\nvar state352 = /*#__PURE__*/new State();\nvar state353 = /*#__PURE__*/new State();\nvar state354 = /*#__PURE__*/new State();\nvar state355 = /*#__PURE__*/new State();\nvar state356 = /*#__PURE__*/new State();\nvar state357 = /*#__PURE__*/new State();\nvar state358 = /*#__PURE__*/new State();\nvar state359 = /*#__PURE__*/new State();\nvar state360 = /*#__PURE__*/new State();\nvar state361 = /*#__PURE__*/new State();\nvar state362 = /*#__PURE__*/new State();\nvar state363 = /*#__PURE__*/new State();\nvar state364 = /*#__PURE__*/new State();\nvar state365 = /*#__PURE__*/new State();\nvar state366 = /*#__PURE__*/new State();\nvar state367 = /*#__PURE__*/new State();\nvar state368 = /*#__PURE__*/new State();\nvar state369 = /*#__PURE__*/new State();\nvar state370 = /*#__PURE__*/new State();\nvar state371 = /*#__PURE__*/new State();\nvar state372 = /*#__PURE__*/new State();\nvar state373 = /*#__PURE__*/new State();\nvar state374 = /*#__PURE__*/new State();\nvar state375 = /*#__PURE__*/new State();\nvar state376 = /*#__PURE__*/new State();\nvar state377 = /*#__PURE__*/new State();\nvar state378 = /*#__PURE__*/new State();\n\nstate0.p = function (step, frame) {\n  step.startCall(\"main\").addReturn(frame.context, state1);\n};\n\nstate0.id = 0;\n\nstate1.p = function (step, frame) {\n  step.addAccept(frame.context);\n};\n\nstate1.id = 1;\n\nstate2.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state3);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state4);\n};\n\nstate2.id = 2;\n\nstate3.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state3);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state4);\n};\n\nstate3.id = 3;\n\nstate4.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state5);\n  step.returnCall(\"main\", frame);\n};\n\nstate4.id = 4;\n\nstate5.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state5);\n  step.returnCall(\"main\", frame);\n};\n\nstate5.id = 5;\n\nstate6.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 9) {\n    frame.addNextState(state7);\n  }\n\n  if (token === 10) {\n    frame.addNextState(state8);\n  }\n\n  if (token === 11) {\n    frame.addNextState(state9);\n  }\n\n  if (token === 12) {\n    frame.addNextState(state10);\n  }\n\n  if (token === 13) {\n    frame.addNextState(state11);\n  }\n\n  if (token === 32) {\n    frame.addNextState(state12);\n  }\n\n  if (token === 133) {\n    frame.addNextState(state13);\n  }\n\n  if (token === 160) {\n    frame.addNextState(state14);\n  }\n};\n\nstate6.id = 6;\n\nstate7.p = function (step, frame) {\n  step.returnCall(\"SPACE\", frame);\n};\n\nstate7.id = 7;\n\nstate8.p = function (step, frame) {\n  step.returnCall(\"SPACE\", frame);\n};\n\nstate8.id = 8;\n\nstate9.p = function (step, frame) {\n  step.returnCall(\"SPACE\", frame);\n};\n\nstate9.id = 9;\n\nstate10.p = function (step, frame) {\n  step.returnCall(\"SPACE\", frame);\n};\n\nstate10.id = 10;\n\nstate11.p = function (step, frame) {\n  step.returnCall(\"SPACE\", frame);\n};\n\nstate11.id = 11;\n\nstate12.p = function (step, frame) {\n  step.returnCall(\"SPACE\", frame);\n};\n\nstate12.id = 12;\n\nstate13.p = function (step, frame) {\n  step.returnCall(\"SPACE\", frame);\n};\n\nstate13.id = 13;\n\nstate14.p = function (step, frame) {\n  step.returnCall(\"SPACE\", frame);\n};\n\nstate14.id = 14;\n\nstate15.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 47) {\n    frame.addNextState(state16);\n  }\n};\n\nstate15.id = 15;\n\nstate16.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 47) {\n    frame.addNextState(state17);\n  }\n};\n\nstate16.id = 16;\n\nstate17.p = function (step, frame) {\n  var token = step.token;\n\n  if (token <= 9) {\n    frame.addNextState(state18);\n  }\n\n  if (token >= 11) {\n    frame.addNextState(state19);\n  }\n};\n\nstate17.id = 17;\n\nstate18.p = function (step, frame) {\n  var token = step.token;\n\n  if (token <= 9) {\n    frame.addNextState(state18);\n  }\n\n  if (token >= 11) {\n    frame.addNextState(state19);\n  }\n\n  step.startCall(\"COMMENT_END\").addReturn(frame.context, state20);\n};\n\nstate18.id = 18;\n\nstate19.p = function (step, frame) {\n  var token = step.token;\n\n  if (token <= 9) {\n    frame.addNextState(state18);\n  }\n\n  if (token >= 11) {\n    frame.addNextState(state19);\n  }\n\n  step.startCall(\"COMMENT_END\").addReturn(frame.context, state20);\n};\n\nstate19.id = 19;\n\nstate20.p = function (step, frame) {\n  step.returnCall(\"COMMENT\", frame);\n};\n\nstate20.id = 20;\n\nstate21.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 10) {\n    frame.addNextState(state22);\n  }\n};\n\nstate21.id = 21;\n\nstate22.p = function (step, frame) {\n  step.returnCall(\"COMMENT_END\", frame);\n};\n\nstate22.id = 22;\n\nstate23.p = function (step, frame) {\n  step.startCall(\"SPACE\").addReturn(frame.context, state24);\n  step.startCall(\"COMMENT\").addReturn(frame.context, state25);\n};\n\nstate23.id = 23;\n\nstate24.p = function (step, frame) {\n  step.returnCall(\"IGN\", frame);\n};\n\nstate24.id = 24;\n\nstate25.p = function (step, frame) {\n  step.returnCall(\"IGN\", frame);\n};\n\nstate25.id = 25;\n\nstate26.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 124) {\n    frame.addNextState(state27);\n  }\n};\n\nstate26.id = 26;\n\nstate27.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state28);\n  step.returnCall(\"PIPE\", frame);\n};\n\nstate27.id = 27;\n\nstate28.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state28);\n  step.returnCall(\"PIPE\", frame);\n};\n\nstate28.id = 28;\n\nstate29.p = function (step, frame) {\n  step.addMark(\"parent\", frame.context, state30);\n  step.addMark(\"dblparent\", frame.context, state31);\n};\n\nstate29.id = 29;\n\nstate30.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 94) {\n    frame.addNextState(state32);\n  }\n};\n\nstate30.id = 30;\n\nstate31.p = function (step, frame) {\n  step.startCall(\"PARENT\").addReturn(frame.context, state33);\n};\n\nstate31.id = 31;\n\nstate32.p = function (step, frame) {\n  step.returnCall(\"PARENT\", frame);\n};\n\nstate32.id = 32;\n\nstate33.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state34);\n  }\n};\n\nstate33.id = 33;\n\nstate34.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 94) {\n    frame.addNextState(state35);\n  }\n};\n\nstate34.id = 34;\n\nstate35.p = function (step, frame) {\n  step.returnCall(\"PARENT\", frame);\n};\n\nstate35.id = 35;\n\nstate36.p = function (step, frame) {\n  var token = step.token;\n\n  if (token >= 97 && token <= 122) {\n    frame.addNextState(state37);\n  }\n\n  if (token >= 65 && token <= 90) {\n    frame.addNextState(state38);\n  }\n\n  if (token === 95) {\n    frame.addNextState(state39);\n  }\n};\n\nstate36.id = 36;\n\nstate37.p = function (step, frame) {\n  step.returnCall(\"IDENT_FST\", frame);\n};\n\nstate37.id = 37;\n\nstate38.p = function (step, frame) {\n  step.returnCall(\"IDENT_FST\", frame);\n};\n\nstate38.id = 38;\n\nstate39.p = function (step, frame) {\n  step.returnCall(\"IDENT_FST\", frame);\n};\n\nstate39.id = 39;\n\nstate40.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IDENT_FST\").addReturn(frame.context, state41);\n\n  if (token >= 48 && token <= 57) {\n    frame.addNextState(state42);\n  }\n};\n\nstate40.id = 40;\n\nstate41.p = function (step, frame) {\n  step.returnCall(\"IDENT_REST\", frame);\n};\n\nstate41.id = 41;\n\nstate42.p = function (step, frame) {\n  step.returnCall(\"IDENT_REST\", frame);\n};\n\nstate42.id = 42;\n\nstate43.p = function (step, frame) {\n  step.startCall(\"IDENT_FST\").addReturn(frame.context, state44);\n};\n\nstate43.id = 43;\n\nstate44.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IDENT_REST\").addReturn(frame.context, state45);\n  if ((token <= 96 || token >= 123) && (token <= 64 || token >= 91) && (token <= 47 || token >= 58)) step.returnCall(\"IDENT\", frame);\n};\n\nstate44.id = 44;\n\nstate45.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IDENT_REST\").addReturn(frame.context, state45);\n  if ((token <= 96 || token >= 123) && (token <= 64 || token >= 91) && (token <= 47 || token >= 58)) step.returnCall(\"IDENT\", frame);\n};\n\nstate45.id = 45;\n\nstate46.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 42) {\n    frame.addNextState(state47);\n  }\n};\n\nstate46.id = 46;\n\nstate47.p = function (step, frame) {\n  var token = step.token;\n  if (token <= 41 || token >= 43) step.returnCall(\"STAR\", frame);\n};\n\nstate47.id = 47;\n\nstate48.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 61) {\n    frame.addNextState(state49);\n  }\n\n  if (token === 33) {\n    frame.addNextState(state50);\n  }\n\n  if (token === 62) {\n    frame.addNextState(state51);\n  }\n\n  if (token === 62) {\n    frame.addNextState(state52);\n  }\n\n  if (token === 60) {\n    frame.addNextState(state53);\n  }\n\n  if (token === 60) {\n    frame.addNextState(state54);\n  }\n\n  if (token === 105) {\n    frame.addNextState(state55);\n  }\n\n  if (token === 109) {\n    frame.addNextState(state56);\n  }\n};\n\nstate48.id = 48;\n\nstate49.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 61) {\n    frame.addNextState(state57);\n  }\n};\n\nstate49.id = 49;\n\nstate50.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 61) {\n    frame.addNextState(state58);\n  }\n};\n\nstate50.id = 50;\n\nstate51.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 61) {\n    frame.addNextState(state59);\n  }\n};\n\nstate51.id = 51;\n\nstate52.p = function (step, frame) {\n  step.returnCall(\"COMP_OP\", frame);\n};\n\nstate52.id = 52;\n\nstate53.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 61) {\n    frame.addNextState(state60);\n  }\n};\n\nstate53.id = 53;\n\nstate54.p = function (step, frame) {\n  step.returnCall(\"COMP_OP\", frame);\n};\n\nstate54.id = 54;\n\nstate55.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 110) {\n    frame.addNextState(state61);\n  }\n};\n\nstate55.id = 55;\n\nstate56.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 97) {\n    frame.addNextState(state62);\n  }\n};\n\nstate56.id = 56;\n\nstate57.p = function (step, frame) {\n  step.returnCall(\"COMP_OP\", frame);\n};\n\nstate57.id = 57;\n\nstate58.p = function (step, frame) {\n  step.returnCall(\"COMP_OP\", frame);\n};\n\nstate58.id = 58;\n\nstate59.p = function (step, frame) {\n  step.returnCall(\"COMP_OP\", frame);\n};\n\nstate59.id = 59;\n\nstate60.p = function (step, frame) {\n  step.returnCall(\"COMP_OP\", frame);\n};\n\nstate60.id = 60;\n\nstate61.p = function (step, frame) {\n  step.returnCall(\"COMP_OP\", frame);\n};\n\nstate61.id = 61;\n\nstate62.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 116) {\n    frame.addNextState(state63);\n  }\n};\n\nstate62.id = 62;\n\nstate63.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 99) {\n    frame.addNextState(state64);\n  }\n};\n\nstate63.id = 63;\n\nstate64.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 104) {\n    frame.addNextState(state65);\n  }\n};\n\nstate64.id = 64;\n\nstate65.p = function (step, frame) {\n  step.returnCall(\"COMP_OP\", frame);\n};\n\nstate65.id = 65;\n\nstate66.p = function (step, frame) {\n  step.addMark(\"func_call\", frame.context, state67);\n};\n\nstate66.id = 66;\n\nstate67.p = function (step, frame) {\n  step.startCall(\"IDENT\").addReturn(frame.context, state68);\n};\n\nstate67.id = 67;\n\nstate68.p = function (step, frame) {\n  step.addMark(\"func_name_end\", frame.context, state69);\n};\n\nstate68.id = 68;\n\nstate69.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 40) {\n    frame.addNextState(state70);\n  }\n};\n\nstate69.id = 69;\n\nstate70.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state71);\n  step.startCall(\"FUNC_ARGS\").addReturn(frame.context, state72);\n  step.addMark(\"func_args_end\", frame.context, state73);\n};\n\nstate70.id = 70;\n\nstate71.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state71);\n  step.startCall(\"FUNC_ARGS\").addReturn(frame.context, state72);\n  step.addMark(\"func_args_end\", frame.context, state73);\n};\n\nstate71.id = 71;\n\nstate72.p = function (step, frame) {\n  step.addMark(\"func_args_end\", frame.context, state73);\n};\n\nstate72.id = 72;\n\nstate73.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state74);\n\n  if (token === 41) {\n    frame.addNextState(state75);\n  }\n};\n\nstate73.id = 73;\n\nstate74.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state74);\n\n  if (token === 41) {\n    frame.addNextState(state75);\n  }\n};\n\nstate74.id = 74;\n\nstate75.p = function (step, frame) {\n  step.returnCall(\"FUNC_CALL\", frame);\n};\n\nstate75.id = 75;\n\nstate76.p = function (step, frame) {\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state77);\n};\n\nstate76.id = 76;\n\nstate77.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state78);\n\n  if (token === 44) {\n    frame.addNextState(state80);\n  }\n\n  step.returnCall(\"FUNC_ARGS\", frame);\n};\n\nstate77.id = 77;\n\nstate78.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state78);\n\n  if (token === 44) {\n    frame.addNextState(state80);\n  }\n\n  step.returnCall(\"FUNC_ARGS\", frame);\n};\n\nstate78.id = 78;\n\nstate79.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state79);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state81);\n};\n\nstate79.id = 79;\n\nstate80.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state79);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state81);\n};\n\nstate80.id = 80;\n\nstate81.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state82);\n\n  if (token === 44) {\n    frame.addNextState(state80);\n  }\n\n  step.returnCall(\"FUNC_ARGS\", frame);\n};\n\nstate81.id = 81;\n\nstate82.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state82);\n\n  if (token === 44) {\n    frame.addNextState(state80);\n  }\n\n  step.returnCall(\"FUNC_ARGS\", frame);\n};\n\nstate82.id = 82;\n\nstate83.p = function (step, frame) {\n  step.addMark(\"sci\", frame.context, state84);\n  step.addMark(\"float\", frame.context, state85);\n  step.addMark(\"integer\", frame.context, state86);\n};\n\nstate83.id = 83;\n\nstate84.p = function (step, frame) {\n  step.startCall(\"DIGIT\").addReturn(frame.context, state87);\n};\n\nstate84.id = 84;\n\nstate85.p = function (step, frame) {\n  step.startCall(\"DIGIT\").addReturn(frame.context, state95);\n};\n\nstate85.id = 85;\n\nstate86.p = function (step, frame) {\n  step.startCall(\"DIGIT\").addReturn(frame.context, state99);\n};\n\nstate86.id = 86;\n\nstate87.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"DIGIT\").addReturn(frame.context, state87);\n\n  if (token === 46) {\n    frame.addNextState(state89);\n  }\n\n  if (token === 101) {\n    frame.addNextState(state90);\n  }\n\n  if (token === 69) {\n    frame.addNextState(state91);\n  }\n};\n\nstate87.id = 87;\n\nstate88.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"DIGIT\").addReturn(frame.context, state88);\n\n  if (token === 101) {\n    frame.addNextState(state90);\n  }\n\n  if (token === 69) {\n    frame.addNextState(state91);\n  }\n};\n\nstate88.id = 88;\n\nstate89.p = function (step, frame) {\n  step.startCall(\"DIGIT\").addReturn(frame.context, state88);\n};\n\nstate89.id = 89;\n\nstate90.p = function (step, frame) {\n  step.startCall(\"SIGN\").addReturn(frame.context, state92);\n  step.startCall(\"DIGIT\").addReturn(frame.context, state93);\n};\n\nstate90.id = 90;\n\nstate91.p = function (step, frame) {\n  step.startCall(\"SIGN\").addReturn(frame.context, state92);\n  step.startCall(\"DIGIT\").addReturn(frame.context, state93);\n};\n\nstate91.id = 91;\n\nstate92.p = function (step, frame) {\n  step.startCall(\"DIGIT\").addReturn(frame.context, state93);\n};\n\nstate92.id = 92;\n\nstate93.p = function (step, frame) {\n  step.startCall(\"DIGIT\").addReturn(frame.context, state93);\n  step.addMark(\"sci_end\", frame.context, state94);\n};\n\nstate93.id = 93;\n\nstate94.p = function (step, frame) {\n  step.returnCall(\"NUMBER\", frame);\n};\n\nstate94.id = 94;\n\nstate95.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"DIGIT\").addReturn(frame.context, state95);\n\n  if (token === 46) {\n    frame.addNextState(state96);\n  }\n};\n\nstate95.id = 95;\n\nstate96.p = function (step, frame) {\n  step.startCall(\"DIGIT\").addReturn(frame.context, state97);\n};\n\nstate96.id = 96;\n\nstate97.p = function (step, frame) {\n  step.startCall(\"DIGIT\").addReturn(frame.context, state97);\n  step.addMark(\"float_end\", frame.context, state98);\n};\n\nstate97.id = 97;\n\nstate98.p = function (step, frame) {\n  step.returnCall(\"NUMBER\", frame);\n};\n\nstate98.id = 98;\n\nstate99.p = function (step, frame) {\n  step.startCall(\"DIGIT\").addReturn(frame.context, state99);\n  step.addMark(\"integer_end\", frame.context, state100);\n};\n\nstate99.id = 99;\n\nstate100.p = function (step, frame) {\n  step.returnCall(\"NUMBER\", frame);\n};\n\nstate100.id = 100;\n\nstate101.p = function (step, frame) {\n  var token = step.token;\n\n  if (token >= 48 && token <= 57) {\n    frame.addNextState(state102);\n  }\n};\n\nstate101.id = 101;\n\nstate102.p = function (step, frame) {\n  step.returnCall(\"DIGIT\", frame);\n};\n\nstate102.id = 102;\n\nstate103.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 43) {\n    frame.addNextState(state104);\n  }\n\n  if (token === 45) {\n    frame.addNextState(state105);\n  }\n};\n\nstate103.id = 103;\n\nstate104.p = function (step, frame) {\n  step.returnCall(\"SIGN\", frame);\n};\n\nstate104.id = 104;\n\nstate105.p = function (step, frame) {\n  step.returnCall(\"SIGN\", frame);\n};\n\nstate105.id = 105;\n\nstate106.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 34) {\n    frame.addNextState(state107);\n  }\n\n  if (token === 39) {\n    frame.addNextState(state108);\n  }\n};\n\nstate106.id = 106;\n\nstate107.p = function (step, frame) {\n  step.addMark(\"str_begin\", frame.context, state109);\n};\n\nstate107.id = 107;\n\nstate108.p = function (step, frame) {\n  step.addMark(\"str_begin\", frame.context, state113);\n};\n\nstate108.id = 108;\n\nstate109.p = function (step, frame) {\n  step.startCall(\"DSTRING_CHAR\").addReturn(frame.context, state110);\n  step.addMark(\"str_end\", frame.context, state111);\n};\n\nstate109.id = 109;\n\nstate110.p = function (step, frame) {\n  step.startCall(\"DSTRING_CHAR\").addReturn(frame.context, state110);\n  step.addMark(\"str_end\", frame.context, state111);\n};\n\nstate110.id = 110;\n\nstate111.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 34) {\n    frame.addNextState(state112);\n  }\n};\n\nstate111.id = 111;\n\nstate112.p = function (step, frame) {\n  step.returnCall(\"STRING\", frame);\n};\n\nstate112.id = 112;\n\nstate113.p = function (step, frame) {\n  step.startCall(\"SSTRING_CHAR\").addReturn(frame.context, state114);\n  step.addMark(\"str_end\", frame.context, state115);\n};\n\nstate113.id = 113;\n\nstate114.p = function (step, frame) {\n  step.startCall(\"SSTRING_CHAR\").addReturn(frame.context, state114);\n  step.addMark(\"str_end\", frame.context, state115);\n};\n\nstate114.id = 114;\n\nstate115.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 39) {\n    frame.addNextState(state116);\n  }\n};\n\nstate115.id = 115;\n\nstate116.p = function (step, frame) {\n  step.returnCall(\"STRING\", frame);\n};\n\nstate116.id = 116;\n\nstate117.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 92) {\n    frame.addNextState(state118);\n  }\n\n  if ((token <= 33 || token >= 35) && (token <= 91 || token >= 93)) {\n    frame.addNextState(state119);\n  }\n};\n\nstate117.id = 117;\n\nstate118.p = function (step, frame) {\n\n  {\n    frame.addNextState(state120);\n  }\n};\n\nstate118.id = 118;\n\nstate119.p = function (step, frame) {\n  step.returnCall(\"DSTRING_CHAR\", frame);\n};\n\nstate119.id = 119;\n\nstate120.p = function (step, frame) {\n  step.returnCall(\"DSTRING_CHAR\", frame);\n};\n\nstate120.id = 120;\n\nstate121.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 92) {\n    frame.addNextState(state122);\n  }\n\n  if ((token <= 38 || token >= 40) && (token <= 91 || token >= 93)) {\n    frame.addNextState(state123);\n  }\n};\n\nstate121.id = 121;\n\nstate122.p = function (step, frame) {\n\n  {\n    frame.addNextState(state124);\n  }\n};\n\nstate122.id = 122;\n\nstate123.p = function (step, frame) {\n  step.returnCall(\"SSTRING_CHAR\", frame);\n};\n\nstate123.id = 123;\n\nstate124.p = function (step, frame) {\n  step.returnCall(\"SSTRING_CHAR\", frame);\n};\n\nstate124.id = 124;\n\nstate125.p = function (step, frame) {\n  step.addMark(\"array\", frame.context, state126);\n};\n\nstate125.id = 125;\n\nstate126.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 91) {\n    frame.addNextState(state127);\n  }\n};\n\nstate126.id = 126;\n\nstate127.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state128);\n  step.startCall(\"ARRAY_ELEMENT\").addReturn(frame.context, state130);\n\n  if (token === 93) {\n    frame.addNextState(state137);\n  }\n};\n\nstate127.id = 127;\n\nstate128.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state128);\n  step.startCall(\"ARRAY_ELEMENT\").addReturn(frame.context, state130);\n\n  if (token === 93) {\n    frame.addNextState(state137);\n  }\n};\n\nstate128.id = 128;\n\nstate129.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state129);\n\n  if (token === 44) {\n    frame.addNextState(state132);\n  }\n\n  if (token === 44) {\n    frame.addNextState(state136);\n  }\n\n  if (token === 93) {\n    frame.addNextState(state137);\n  }\n};\n\nstate129.id = 129;\n\nstate130.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state129);\n\n  if (token === 44) {\n    frame.addNextState(state132);\n  }\n\n  if (token === 44) {\n    frame.addNextState(state136);\n  }\n\n  if (token === 93) {\n    frame.addNextState(state137);\n  }\n};\n\nstate130.id = 130;\n\nstate131.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state131);\n  step.startCall(\"ARRAY_ELEMENT\").addReturn(frame.context, state133);\n};\n\nstate131.id = 131;\n\nstate132.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state131);\n  step.startCall(\"ARRAY_ELEMENT\").addReturn(frame.context, state133);\n};\n\nstate132.id = 132;\n\nstate133.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state134);\n\n  if (token === 44) {\n    frame.addNextState(state132);\n  }\n\n  if (token === 44) {\n    frame.addNextState(state136);\n  }\n\n  if (token === 93) {\n    frame.addNextState(state137);\n  }\n};\n\nstate133.id = 133;\n\nstate134.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state134);\n\n  if (token === 44) {\n    frame.addNextState(state132);\n  }\n\n  if (token === 44) {\n    frame.addNextState(state136);\n  }\n\n  if (token === 93) {\n    frame.addNextState(state137);\n  }\n};\n\nstate134.id = 134;\n\nstate135.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state135);\n\n  if (token === 93) {\n    frame.addNextState(state137);\n  }\n};\n\nstate135.id = 135;\n\nstate136.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state135);\n\n  if (token === 93) {\n    frame.addNextState(state137);\n  }\n};\n\nstate136.id = 136;\n\nstate137.p = function (step, frame) {\n  step.addMark(\"array_end\", frame.context, state138);\n};\n\nstate137.id = 137;\n\nstate138.p = function (step, frame) {\n  step.returnCall(\"ARRAY\", frame);\n};\n\nstate138.id = 138;\n\nstate139.p = function (step, frame) {\n  step.addMark(\"array_splat\", frame.context, state140);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state141);\n};\n\nstate139.id = 139;\n\nstate140.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state142);\n  }\n};\n\nstate140.id = 140;\n\nstate141.p = function (step, frame) {\n  step.returnCall(\"ARRAY_ELEMENT\", frame);\n};\n\nstate141.id = 141;\n\nstate142.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state143);\n  }\n};\n\nstate142.id = 142;\n\nstate143.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state144);\n  }\n};\n\nstate143.id = 143;\n\nstate144.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state145);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state141);\n};\n\nstate144.id = 144;\n\nstate145.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state145);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state141);\n};\n\nstate145.id = 145;\n\nstate146.p = function (step, frame) {\n  step.addMark(\"object\", frame.context, state147);\n};\n\nstate146.id = 146;\n\nstate147.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 123) {\n    frame.addNextState(state148);\n  }\n};\n\nstate147.id = 147;\n\nstate148.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state149);\n  step.startCall(\"OBJECT_PAIR\").addReturn(frame.context, state151);\n\n  if (token === 125) {\n    frame.addNextState(state158);\n  }\n};\n\nstate148.id = 148;\n\nstate149.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state149);\n  step.startCall(\"OBJECT_PAIR\").addReturn(frame.context, state151);\n\n  if (token === 125) {\n    frame.addNextState(state158);\n  }\n};\n\nstate149.id = 149;\n\nstate150.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state150);\n\n  if (token === 44) {\n    frame.addNextState(state153);\n  }\n\n  if (token === 44) {\n    frame.addNextState(state157);\n  }\n\n  if (token === 125) {\n    frame.addNextState(state158);\n  }\n};\n\nstate150.id = 150;\n\nstate151.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state150);\n\n  if (token === 44) {\n    frame.addNextState(state153);\n  }\n\n  if (token === 44) {\n    frame.addNextState(state157);\n  }\n\n  if (token === 125) {\n    frame.addNextState(state158);\n  }\n};\n\nstate151.id = 151;\n\nstate152.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state152);\n  step.startCall(\"OBJECT_PAIR\").addReturn(frame.context, state154);\n};\n\nstate152.id = 152;\n\nstate153.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state152);\n  step.startCall(\"OBJECT_PAIR\").addReturn(frame.context, state154);\n};\n\nstate153.id = 153;\n\nstate154.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state155);\n\n  if (token === 44) {\n    frame.addNextState(state153);\n  }\n\n  if (token === 44) {\n    frame.addNextState(state157);\n  }\n\n  if (token === 125) {\n    frame.addNextState(state158);\n  }\n};\n\nstate154.id = 154;\n\nstate155.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state155);\n\n  if (token === 44) {\n    frame.addNextState(state153);\n  }\n\n  if (token === 44) {\n    frame.addNextState(state157);\n  }\n\n  if (token === 125) {\n    frame.addNextState(state158);\n  }\n};\n\nstate155.id = 155;\n\nstate156.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state156);\n\n  if (token === 125) {\n    frame.addNextState(state158);\n  }\n};\n\nstate156.id = 156;\n\nstate157.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state156);\n\n  if (token === 125) {\n    frame.addNextState(state158);\n  }\n};\n\nstate157.id = 157;\n\nstate158.p = function (step, frame) {\n  step.addMark(\"object_end\", frame.context, state159);\n};\n\nstate158.id = 158;\n\nstate159.p = function (step, frame) {\n  step.returnCall(\"OBJECT\", frame);\n};\n\nstate159.id = 159;\n\nstate160.p = function (step, frame) {\n  step.addMark(\"object_pair\", frame.context, state161);\n  step.addMark(\"object_expr\", frame.context, state162);\n  step.addMark(\"object_splat_this\", frame.context, state163);\n  step.addMark(\"object_splat\", frame.context, state164);\n};\n\nstate160.id = 160;\n\nstate161.p = function (step, frame) {\n  step.startCall(\"STRING\").addReturn(frame.context, state165);\n};\n\nstate161.id = 161;\n\nstate162.p = function (step, frame) {\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state170);\n};\n\nstate162.id = 162;\n\nstate163.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state171);\n  }\n};\n\nstate163.id = 163;\n\nstate164.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state174);\n  }\n};\n\nstate164.id = 164;\n\nstate165.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state166);\n\n  if (token === 58) {\n    frame.addNextState(state167);\n  }\n};\n\nstate165.id = 165;\n\nstate166.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state166);\n\n  if (token === 58) {\n    frame.addNextState(state167);\n  }\n};\n\nstate166.id = 166;\n\nstate167.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state168);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state169);\n};\n\nstate167.id = 167;\n\nstate168.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state168);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state169);\n};\n\nstate168.id = 168;\n\nstate169.p = function (step, frame) {\n  step.returnCall(\"OBJECT_PAIR\", frame);\n};\n\nstate169.id = 169;\n\nstate170.p = function (step, frame) {\n  step.returnCall(\"OBJECT_PAIR\", frame);\n};\n\nstate170.id = 170;\n\nstate171.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state172);\n  }\n};\n\nstate171.id = 171;\n\nstate172.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state173);\n  }\n};\n\nstate172.id = 172;\n\nstate173.p = function (step, frame) {\n  step.returnCall(\"OBJECT_PAIR\", frame);\n};\n\nstate173.id = 173;\n\nstate174.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state175);\n  }\n};\n\nstate174.id = 174;\n\nstate175.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state176);\n  }\n};\n\nstate175.id = 175;\n\nstate176.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state177);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state178);\n};\n\nstate176.id = 176;\n\nstate177.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state177);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state178);\n};\n\nstate177.id = 177;\n\nstate178.p = function (step, frame) {\n  step.returnCall(\"OBJECT_PAIR\", frame);\n};\n\nstate178.id = 178;\n\nstate179.p = function (step, frame) {\n  step.addMark(\"pair\", frame.context, state180);\n  step.startCall(\"EXPR^2\").addReturn(frame.context, state181);\n};\n\nstate179.id = 179;\n\nstate180.p = function (step, frame) {\n  step.startCall(\"EXPR^2\").addReturn(frame.context, state182);\n};\n\nstate180.id = 180;\n\nstate181.p = function (step, frame) {\n  step.returnCall(\"EXPR^1\", frame);\n};\n\nstate181.id = 181;\n\nstate182.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state183);\n\n  if (token === 61) {\n    frame.addNextState(state184);\n  }\n};\n\nstate182.id = 182;\n\nstate183.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state183);\n\n  if (token === 61) {\n    frame.addNextState(state184);\n  }\n};\n\nstate183.id = 183;\n\nstate184.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 62) {\n    frame.addNextState(state185);\n  }\n};\n\nstate184.id = 184;\n\nstate185.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state186);\n  step.startCall(\"EXPR^2\").addReturn(frame.context, state187);\n};\n\nstate185.id = 185;\n\nstate186.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state186);\n  step.startCall(\"EXPR^2\").addReturn(frame.context, state187);\n};\n\nstate186.id = 186;\n\nstate187.p = function (step, frame) {\n  step.returnCall(\"EXPR^1\", frame);\n};\n\nstate187.id = 187;\n\nstate188.p = function (step, frame) {\n  step.addMark(\"or\", frame.context, state189);\n  step.startCall(\"EXPR^3\").addReturn(frame.context, state190);\n};\n\nstate188.id = 188;\n\nstate189.p = function (step, frame) {\n  step.startCall(\"EXPR^2\").addReturn(frame.context, state191);\n};\n\nstate189.id = 189;\n\nstate190.p = function (step, frame) {\n  step.returnCall(\"EXPR^2\", frame);\n};\n\nstate190.id = 190;\n\nstate191.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state192);\n\n  if (token === 124) {\n    frame.addNextState(state193);\n  }\n};\n\nstate191.id = 191;\n\nstate192.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state192);\n\n  if (token === 124) {\n    frame.addNextState(state193);\n  }\n};\n\nstate192.id = 192;\n\nstate193.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 124) {\n    frame.addNextState(state194);\n  }\n};\n\nstate193.id = 193;\n\nstate194.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state195);\n  step.startCall(\"EXPR^3\").addReturn(frame.context, state196);\n};\n\nstate194.id = 194;\n\nstate195.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state195);\n  step.startCall(\"EXPR^3\").addReturn(frame.context, state196);\n};\n\nstate195.id = 195;\n\nstate196.p = function (step, frame) {\n  step.returnCall(\"EXPR^2\", frame);\n};\n\nstate196.id = 196;\n\nstate197.p = function (step, frame) {\n  step.addMark(\"and\", frame.context, state198);\n  step.startCall(\"EXPR^4\").addReturn(frame.context, state199);\n};\n\nstate197.id = 197;\n\nstate198.p = function (step, frame) {\n  step.startCall(\"EXPR^3\").addReturn(frame.context, state200);\n};\n\nstate198.id = 198;\n\nstate199.p = function (step, frame) {\n  step.returnCall(\"EXPR^3\", frame);\n};\n\nstate199.id = 199;\n\nstate200.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state201);\n\n  if (token === 38) {\n    frame.addNextState(state202);\n  }\n};\n\nstate200.id = 200;\n\nstate201.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state201);\n\n  if (token === 38) {\n    frame.addNextState(state202);\n  }\n};\n\nstate201.id = 201;\n\nstate202.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 38) {\n    frame.addNextState(state203);\n  }\n};\n\nstate202.id = 202;\n\nstate203.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state204);\n  step.startCall(\"EXPR^4\").addReturn(frame.context, state205);\n};\n\nstate203.id = 203;\n\nstate204.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state204);\n  step.startCall(\"EXPR^4\").addReturn(frame.context, state205);\n};\n\nstate204.id = 204;\n\nstate205.p = function (step, frame) {\n  step.returnCall(\"EXPR^3\", frame);\n};\n\nstate205.id = 205;\n\nstate206.p = function (step, frame) {\n  step.addMark(\"comp\", frame.context, state207);\n  step.addMark(\"asc\", frame.context, state208);\n  step.addMark(\"desc\", frame.context, state209);\n  step.startCall(\"EXPR^5\").addReturn(frame.context, state210);\n};\n\nstate206.id = 206;\n\nstate207.p = function (step, frame) {\n  step.startCall(\"EXPR^5\").addReturn(frame.context, state211);\n};\n\nstate207.id = 207;\n\nstate208.p = function (step, frame) {\n  step.startCall(\"EXPR^4\").addReturn(frame.context, state218);\n};\n\nstate208.id = 208;\n\nstate209.p = function (step, frame) {\n  step.startCall(\"EXPR^4\").addReturn(frame.context, state223);\n};\n\nstate209.id = 209;\n\nstate210.p = function (step, frame) {\n  step.returnCall(\"EXPR^4\", frame);\n};\n\nstate210.id = 210;\n\nstate211.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state212);\n  step.addMark(\"op\", frame.context, state213);\n};\n\nstate211.id = 211;\n\nstate212.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state212);\n  step.addMark(\"op\", frame.context, state213);\n};\n\nstate212.id = 212;\n\nstate213.p = function (step, frame) {\n  step.startCall(\"COMP_OP\").addReturn(frame.context, state214);\n};\n\nstate213.id = 213;\n\nstate214.p = function (step, frame) {\n  step.addMark(\"end\", frame.context, state215);\n};\n\nstate214.id = 214;\n\nstate215.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state216);\n  step.startCall(\"EXPR^5\").addReturn(frame.context, state217);\n};\n\nstate215.id = 215;\n\nstate216.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state216);\n  step.startCall(\"EXPR^5\").addReturn(frame.context, state217);\n};\n\nstate216.id = 216;\n\nstate217.p = function (step, frame) {\n  step.returnCall(\"EXPR^4\", frame);\n};\n\nstate217.id = 217;\n\nstate218.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state219);\n\n  if (token === 97) {\n    frame.addNextState(state220);\n  }\n};\n\nstate218.id = 218;\n\nstate219.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state219);\n\n  if (token === 97) {\n    frame.addNextState(state220);\n  }\n};\n\nstate219.id = 219;\n\nstate220.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 115) {\n    frame.addNextState(state221);\n  }\n};\n\nstate220.id = 220;\n\nstate221.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 99) {\n    frame.addNextState(state222);\n  }\n};\n\nstate221.id = 221;\n\nstate222.p = function (step, frame) {\n  step.returnCall(\"EXPR^4\", frame);\n};\n\nstate222.id = 222;\n\nstate223.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state224);\n\n  if (token === 100) {\n    frame.addNextState(state225);\n  }\n};\n\nstate223.id = 223;\n\nstate224.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state224);\n\n  if (token === 100) {\n    frame.addNextState(state225);\n  }\n};\n\nstate224.id = 224;\n\nstate225.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 101) {\n    frame.addNextState(state226);\n  }\n};\n\nstate225.id = 225;\n\nstate226.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 115) {\n    frame.addNextState(state227);\n  }\n};\n\nstate226.id = 226;\n\nstate227.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 99) {\n    frame.addNextState(state228);\n  }\n};\n\nstate227.id = 227;\n\nstate228.p = function (step, frame) {\n  step.returnCall(\"EXPR^4\", frame);\n};\n\nstate228.id = 228;\n\nstate229.p = function (step, frame) {\n  step.addMark(\"inc_range\", frame.context, state230);\n  step.addMark(\"exc_range\", frame.context, state231);\n  step.startCall(\"EXPR^6\").addReturn(frame.context, state232);\n};\n\nstate229.id = 229;\n\nstate230.p = function (step, frame) {\n  step.startCall(\"EXPR^6\").addReturn(frame.context, state233);\n};\n\nstate230.id = 230;\n\nstate231.p = function (step, frame) {\n  step.startCall(\"EXPR^6\").addReturn(frame.context, state239);\n};\n\nstate231.id = 231;\n\nstate232.p = function (step, frame) {\n  step.returnCall(\"EXPR^5\", frame);\n};\n\nstate232.id = 232;\n\nstate233.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state234);\n\n  if (token === 46) {\n    frame.addNextState(state235);\n  }\n};\n\nstate233.id = 233;\n\nstate234.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state234);\n\n  if (token === 46) {\n    frame.addNextState(state235);\n  }\n};\n\nstate234.id = 234;\n\nstate235.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state236);\n  }\n};\n\nstate235.id = 235;\n\nstate236.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state237);\n  step.startCall(\"EXPR^6\").addReturn(frame.context, state238);\n};\n\nstate236.id = 236;\n\nstate237.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state237);\n  step.startCall(\"EXPR^6\").addReturn(frame.context, state238);\n};\n\nstate237.id = 237;\n\nstate238.p = function (step, frame) {\n  step.returnCall(\"EXPR^5\", frame);\n};\n\nstate238.id = 238;\n\nstate239.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state240);\n\n  if (token === 46) {\n    frame.addNextState(state241);\n  }\n};\n\nstate239.id = 239;\n\nstate240.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state240);\n\n  if (token === 46) {\n    frame.addNextState(state241);\n  }\n};\n\nstate240.id = 240;\n\nstate241.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state242);\n  }\n};\n\nstate241.id = 241;\n\nstate242.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 46) {\n    frame.addNextState(state243);\n  }\n};\n\nstate242.id = 242;\n\nstate243.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state244);\n  step.startCall(\"EXPR^6\").addReturn(frame.context, state245);\n};\n\nstate243.id = 243;\n\nstate244.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state244);\n  step.startCall(\"EXPR^6\").addReturn(frame.context, state245);\n};\n\nstate244.id = 244;\n\nstate245.p = function (step, frame) {\n  step.returnCall(\"EXPR^5\", frame);\n};\n\nstate245.id = 245;\n\nstate246.p = function (step, frame) {\n  step.addMark(\"add\", frame.context, state247);\n  step.addMark(\"sub\", frame.context, state248);\n  step.startCall(\"EXPR^7\").addReturn(frame.context, state249);\n};\n\nstate246.id = 246;\n\nstate247.p = function (step, frame) {\n  step.startCall(\"EXPR^6\").addReturn(frame.context, state250);\n};\n\nstate247.id = 247;\n\nstate248.p = function (step, frame) {\n  step.startCall(\"EXPR^6\").addReturn(frame.context, state255);\n};\n\nstate248.id = 248;\n\nstate249.p = function (step, frame) {\n  step.returnCall(\"EXPR^6\", frame);\n};\n\nstate249.id = 249;\n\nstate250.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state251);\n\n  if (token === 43) {\n    frame.addNextState(state252);\n  }\n};\n\nstate250.id = 250;\n\nstate251.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state251);\n\n  if (token === 43) {\n    frame.addNextState(state252);\n  }\n};\n\nstate251.id = 251;\n\nstate252.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state253);\n  step.startCall(\"EXPR^7\").addReturn(frame.context, state254);\n};\n\nstate252.id = 252;\n\nstate253.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state253);\n  step.startCall(\"EXPR^7\").addReturn(frame.context, state254);\n};\n\nstate253.id = 253;\n\nstate254.p = function (step, frame) {\n  step.returnCall(\"EXPR^6\", frame);\n};\n\nstate254.id = 254;\n\nstate255.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state256);\n\n  if (token === 45) {\n    frame.addNextState(state257);\n  }\n};\n\nstate255.id = 255;\n\nstate256.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state256);\n\n  if (token === 45) {\n    frame.addNextState(state257);\n  }\n};\n\nstate256.id = 256;\n\nstate257.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state258);\n  step.startCall(\"EXPR^7\").addReturn(frame.context, state259);\n};\n\nstate257.id = 257;\n\nstate258.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state258);\n  step.startCall(\"EXPR^7\").addReturn(frame.context, state259);\n};\n\nstate258.id = 258;\n\nstate259.p = function (step, frame) {\n  step.returnCall(\"EXPR^6\", frame);\n};\n\nstate259.id = 259;\n\nstate260.p = function (step, frame) {\n  step.addMark(\"mul\", frame.context, state261);\n  step.addMark(\"div\", frame.context, state262);\n  step.addMark(\"mod\", frame.context, state263);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state264);\n};\n\nstate260.id = 260;\n\nstate261.p = function (step, frame) {\n  step.startCall(\"EXPR^7\").addReturn(frame.context, state265);\n};\n\nstate261.id = 261;\n\nstate262.p = function (step, frame) {\n  step.startCall(\"EXPR^7\").addReturn(frame.context, state270);\n};\n\nstate262.id = 262;\n\nstate263.p = function (step, frame) {\n  step.startCall(\"EXPR^7\").addReturn(frame.context, state275);\n};\n\nstate263.id = 263;\n\nstate264.p = function (step, frame) {\n  step.returnCall(\"EXPR^7\", frame);\n};\n\nstate264.id = 264;\n\nstate265.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state266);\n  step.startCall(\"STAR\").addReturn(frame.context, state267);\n};\n\nstate265.id = 265;\n\nstate266.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state266);\n  step.startCall(\"STAR\").addReturn(frame.context, state267);\n};\n\nstate266.id = 266;\n\nstate267.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state268);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state269);\n};\n\nstate267.id = 267;\n\nstate268.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state268);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state269);\n};\n\nstate268.id = 268;\n\nstate269.p = function (step, frame) {\n  step.returnCall(\"EXPR^7\", frame);\n};\n\nstate269.id = 269;\n\nstate270.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state271);\n\n  if (token === 47) {\n    frame.addNextState(state272);\n  }\n};\n\nstate270.id = 270;\n\nstate271.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state271);\n\n  if (token === 47) {\n    frame.addNextState(state272);\n  }\n};\n\nstate271.id = 271;\n\nstate272.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state273);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state274);\n};\n\nstate272.id = 272;\n\nstate273.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state273);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state274);\n};\n\nstate273.id = 273;\n\nstate274.p = function (step, frame) {\n  step.returnCall(\"EXPR^7\", frame);\n};\n\nstate274.id = 274;\n\nstate275.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state276);\n\n  if (token === 37) {\n    frame.addNextState(state277);\n  }\n};\n\nstate275.id = 275;\n\nstate276.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state276);\n\n  if (token === 37) {\n    frame.addNextState(state277);\n  }\n};\n\nstate276.id = 276;\n\nstate277.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state278);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state279);\n};\n\nstate277.id = 277;\n\nstate278.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state278);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state279);\n};\n\nstate278.id = 278;\n\nstate279.p = function (step, frame) {\n  step.returnCall(\"EXPR^7\", frame);\n};\n\nstate279.id = 279;\n\nstate280.p = function (step, frame) {\n  step.addMark(\"pow\", frame.context, state281);\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state282);\n};\n\nstate280.id = 280;\n\nstate281.p = function (step, frame) {\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state283);\n};\n\nstate281.id = 281;\n\nstate282.p = function (step, frame) {\n  step.returnCall(\"EXPR^9\", frame);\n};\n\nstate282.id = 282;\n\nstate283.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state284);\n\n  if (token === 42) {\n    frame.addNextState(state285);\n  }\n};\n\nstate283.id = 283;\n\nstate284.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state284);\n\n  if (token === 42) {\n    frame.addNextState(state285);\n  }\n};\n\nstate284.id = 284;\n\nstate285.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 42) {\n    frame.addNextState(state286);\n  }\n};\n\nstate285.id = 285;\n\nstate286.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state287);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state288);\n};\n\nstate286.id = 286;\n\nstate287.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state287);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state288);\n};\n\nstate287.id = 287;\n\nstate288.p = function (step, frame) {\n  step.returnCall(\"EXPR^9\", frame);\n};\n\nstate288.id = 288;\n\nstate289.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"NUMBER\").addReturn(frame.context, state290);\n  step.startCall(\"STRING\").addReturn(frame.context, state291);\n  step.startCall(\"ARRAY\").addReturn(frame.context, state292);\n  step.startCall(\"OBJECT\").addReturn(frame.context, state293);\n  step.addMark(\"star\", frame.context, state294);\n  step.addMark(\"this\", frame.context, state295);\n  step.startCall(\"PARENT\").addReturn(frame.context, state296);\n  step.addMark(\"paren\", frame.context, state297);\n\n  if (token === 36) {\n    frame.addNextState(state298);\n  }\n\n  step.addMark(\"ident\", frame.context, state299);\n  step.startCall(\"FUNC_CALL\").addReturn(frame.context, state300);\n  step.addMark(\"neg\", frame.context, state301);\n  step.addMark(\"pos\", frame.context, state302);\n  step.addMark(\"not\", frame.context, state303);\n\n  if (token === 105) {\n    frame.addNextState(state304);\n  }\n\n  step.addMark(\"deref\", frame.context, state305);\n  step.addMark(\"attr_cond\", frame.context, state306);\n  step.addMark(\"attr_ident\", frame.context, state307);\n  step.addMark(\"pipecall\", frame.context, state308);\n  step.addMark(\"project\", frame.context, state309);\n  step.addMark(\"filter\", frame.context, state310);\n  step.addMark(\"arr_expr\", frame.context, state311);\n};\n\nstate289.id = 289;\n\nstate290.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate290.id = 290;\n\nstate291.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate291.id = 291;\n\nstate292.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate292.id = 292;\n\nstate293.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate293.id = 293;\n\nstate294.p = function (step, frame) {\n  step.startCall(\"STAR\").addReturn(frame.context, state312);\n};\n\nstate294.id = 294;\n\nstate295.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 64) {\n    frame.addNextState(state313);\n  }\n};\n\nstate295.id = 295;\n\nstate296.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate296.id = 296;\n\nstate297.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 40) {\n    frame.addNextState(state314);\n  }\n};\n\nstate297.id = 297;\n\nstate298.p = function (step, frame) {\n  step.addMark(\"param\", frame.context, state319);\n};\n\nstate298.id = 298;\n\nstate299.p = function (step, frame) {\n  step.startCall(\"IDENT\").addReturn(frame.context, state322);\n};\n\nstate299.id = 299;\n\nstate300.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate300.id = 300;\n\nstate301.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 45) {\n    frame.addNextState(state324);\n  }\n};\n\nstate301.id = 301;\n\nstate302.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 43) {\n    frame.addNextState(state327);\n  }\n};\n\nstate302.id = 302;\n\nstate303.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 33) {\n    frame.addNextState(state330);\n  }\n};\n\nstate303.id = 303;\n\nstate304.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 115) {\n    frame.addNextState(state333);\n  }\n};\n\nstate304.id = 304;\n\nstate305.p = function (step, frame) {\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state336);\n};\n\nstate305.id = 305;\n\nstate306.p = function (step, frame) {\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state343);\n};\n\nstate306.id = 306;\n\nstate307.p = function (step, frame) {\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state352);\n};\n\nstate307.id = 307;\n\nstate308.p = function (step, frame) {\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state358);\n};\n\nstate308.id = 308;\n\nstate309.p = function (step, frame) {\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state362);\n};\n\nstate309.id = 309;\n\nstate310.p = function (step, frame) {\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state366);\n};\n\nstate310.id = 310;\n\nstate311.p = function (step, frame) {\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state374);\n};\n\nstate311.id = 311;\n\nstate312.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate312.id = 312;\n\nstate313.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate313.id = 313;\n\nstate314.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state315);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state316);\n};\n\nstate314.id = 314;\n\nstate315.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state315);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state316);\n};\n\nstate315.id = 315;\n\nstate316.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state317);\n\n  if (token === 41) {\n    frame.addNextState(state318);\n  }\n};\n\nstate316.id = 316;\n\nstate317.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state317);\n\n  if (token === 41) {\n    frame.addNextState(state318);\n  }\n};\n\nstate317.id = 317;\n\nstate318.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate318.id = 318;\n\nstate319.p = function (step, frame) {\n  step.startCall(\"IDENT\").addReturn(frame.context, state320);\n};\n\nstate319.id = 319;\n\nstate320.p = function (step, frame) {\n  step.addMark(\"param_end\", frame.context, state321);\n};\n\nstate320.id = 320;\n\nstate321.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate321.id = 321;\n\nstate322.p = function (step, frame) {\n  step.addMark(\"ident_end\", frame.context, state323);\n};\n\nstate322.id = 322;\n\nstate323.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate323.id = 323;\n\nstate324.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state325);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state326);\n};\n\nstate324.id = 324;\n\nstate325.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state325);\n  step.startCall(\"EXPR^9\").addReturn(frame.context, state326);\n};\n\nstate325.id = 325;\n\nstate326.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate326.id = 326;\n\nstate327.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state328);\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state329);\n};\n\nstate327.id = 327;\n\nstate328.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state328);\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state329);\n};\n\nstate328.id = 328;\n\nstate329.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate329.id = 329;\n\nstate330.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state331);\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state332);\n};\n\nstate330.id = 330;\n\nstate331.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state331);\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state332);\n};\n\nstate331.id = 331;\n\nstate332.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate332.id = 332;\n\nstate333.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state334);\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state335);\n};\n\nstate333.id = 333;\n\nstate334.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state334);\n  step.startCall(\"EXPR^11\").addReturn(frame.context, state335);\n};\n\nstate334.id = 334;\n\nstate335.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate335.id = 335;\n\nstate336.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 45) {\n    frame.addNextState(state337);\n  }\n};\n\nstate336.id = 336;\n\nstate337.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 62) {\n    frame.addNextState(state338);\n  }\n};\n\nstate337.id = 337;\n\nstate338.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state339);\n  step.addMark(\"deref_field\", frame.context, state340);\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate338.id = 338;\n\nstate339.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state339);\n  step.addMark(\"deref_field\", frame.context, state340);\n};\n\nstate339.id = 339;\n\nstate340.p = function (step, frame) {\n  step.startCall(\"IDENT\").addReturn(frame.context, state341);\n};\n\nstate340.id = 340;\n\nstate341.p = function (step, frame) {\n  step.addMark(\"end\", frame.context, state342);\n};\n\nstate341.id = 341;\n\nstate342.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate342.id = 342;\n\nstate343.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state344);\n\n  if (token === 46) {\n    frame.addNextState(state345);\n  }\n};\n\nstate343.id = 343;\n\nstate344.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state344);\n\n  if (token === 46) {\n    frame.addNextState(state345);\n  }\n};\n\nstate344.id = 344;\n\nstate345.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state346);\n\n  if (token === 91) {\n    frame.addNextState(state347);\n  }\n};\n\nstate345.id = 345;\n\nstate346.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state346);\n\n  if (token === 91) {\n    frame.addNextState(state347);\n  }\n};\n\nstate346.id = 346;\n\nstate347.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state348);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state349);\n};\n\nstate347.id = 347;\n\nstate348.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state348);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state349);\n};\n\nstate348.id = 348;\n\nstate349.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state350);\n\n  if (token === 93) {\n    frame.addNextState(state351);\n  }\n};\n\nstate349.id = 349;\n\nstate350.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state350);\n\n  if (token === 93) {\n    frame.addNextState(state351);\n  }\n};\n\nstate350.id = 350;\n\nstate351.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate351.id = 351;\n\nstate352.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state353);\n\n  if (token === 46) {\n    frame.addNextState(state354);\n  }\n};\n\nstate352.id = 352;\n\nstate353.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state353);\n\n  if (token === 46) {\n    frame.addNextState(state354);\n  }\n};\n\nstate353.id = 353;\n\nstate354.p = function (step, frame) {\n  step.addMark(\"ident\", frame.context, state355);\n};\n\nstate354.id = 354;\n\nstate355.p = function (step, frame) {\n  step.startCall(\"IDENT\").addReturn(frame.context, state356);\n};\n\nstate355.id = 355;\n\nstate356.p = function (step, frame) {\n  step.addMark(\"ident_end\", frame.context, state357);\n};\n\nstate356.id = 356;\n\nstate357.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate357.id = 357;\n\nstate358.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state359);\n  step.startCall(\"PIPE\").addReturn(frame.context, state360);\n};\n\nstate358.id = 358;\n\nstate359.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state359);\n  step.startCall(\"PIPE\").addReturn(frame.context, state360);\n};\n\nstate359.id = 359;\n\nstate360.p = function (step, frame) {\n  step.startCall(\"FUNC_CALL\").addReturn(frame.context, state361);\n};\n\nstate360.id = 360;\n\nstate361.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate361.id = 361;\n\nstate362.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state363);\n  step.startCall(\"PIPE\").addReturn(frame.context, state364);\n  step.startCall(\"OBJECT\").addReturn(frame.context, state365);\n};\n\nstate362.id = 362;\n\nstate363.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state363);\n  step.startCall(\"PIPE\").addReturn(frame.context, state364);\n  step.startCall(\"OBJECT\").addReturn(frame.context, state365);\n};\n\nstate363.id = 363;\n\nstate364.p = function (step, frame) {\n  step.startCall(\"OBJECT\").addReturn(frame.context, state365);\n};\n\nstate364.id = 364;\n\nstate365.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate365.id = 365;\n\nstate366.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state367);\n  step.startCall(\"PIPE\").addReturn(frame.context, state368);\n\n  if (token === 91) {\n    frame.addNextState(state369);\n  }\n};\n\nstate366.id = 366;\n\nstate367.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state367);\n  step.startCall(\"PIPE\").addReturn(frame.context, state368);\n\n  if (token === 91) {\n    frame.addNextState(state369);\n  }\n};\n\nstate367.id = 367;\n\nstate368.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 91) {\n    frame.addNextState(state369);\n  }\n};\n\nstate368.id = 368;\n\nstate369.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state370);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state371);\n};\n\nstate369.id = 369;\n\nstate370.p = function (step, frame) {\n  step.startCall(\"IGN\").addReturn(frame.context, state370);\n  step.startCall(\"EXPR^1\").addReturn(frame.context, state371);\n};\n\nstate370.id = 370;\n\nstate371.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state372);\n\n  if (token === 93) {\n    frame.addNextState(state373);\n  }\n};\n\nstate371.id = 371;\n\nstate372.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state372);\n\n  if (token === 93) {\n    frame.addNextState(state373);\n  }\n};\n\nstate372.id = 372;\n\nstate373.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate373.id = 373;\n\nstate374.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state375);\n  step.startCall(\"PIPE\").addReturn(frame.context, state376);\n\n  if (token === 91) {\n    frame.addNextState(state377);\n  }\n};\n\nstate374.id = 374;\n\nstate375.p = function (step, frame) {\n  var token = step.token;\n  step.startCall(\"IGN\").addReturn(frame.context, state375);\n  step.startCall(\"PIPE\").addReturn(frame.context, state376);\n\n  if (token === 91) {\n    frame.addNextState(state377);\n  }\n};\n\nstate375.id = 375;\n\nstate376.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 91) {\n    frame.addNextState(state377);\n  }\n};\n\nstate376.id = 376;\n\nstate377.p = function (step, frame) {\n  var token = step.token;\n\n  if (token === 93) {\n    frame.addNextState(state378);\n  }\n};\n\nstate377.id = 377;\n\nstate378.p = function (step, frame) {\n  step.returnCall(\"EXPR^11\", frame);\n};\n\nstate378.id = 378;\nvar initialContext = /*#__PURE__*/new Context(null, null);\nvar initialFrame = /*#__PURE__*/new Frame(initialContext);\ninitialFrame.addNextState(state0);\nvar initialFrames = [initialFrame];\nvar ruleInitialStates = {};\nruleInitialStates[\"main\"] = [state2];\nruleInitialStates[\"SPACE\"] = [state6];\nruleInitialStates[\"COMMENT\"] = [state15];\nruleInitialStates[\"COMMENT_END\"] = [state21];\nruleInitialStates[\"IGN\"] = [state23];\nruleInitialStates[\"PIPE\"] = [state26];\nruleInitialStates[\"PARENT\"] = [state29];\nruleInitialStates[\"IDENT_FST\"] = [state36];\nruleInitialStates[\"IDENT_REST\"] = [state40];\nruleInitialStates[\"IDENT\"] = [state43];\nruleInitialStates[\"STAR\"] = [state46];\nruleInitialStates[\"COMP_OP\"] = [state48];\nruleInitialStates[\"FUNC_CALL\"] = [state66];\nruleInitialStates[\"FUNC_ARGS\"] = [state76];\nruleInitialStates[\"NUMBER\"] = [state83];\nruleInitialStates[\"DIGIT\"] = [state101];\nruleInitialStates[\"SIGN\"] = [state103];\nruleInitialStates[\"STRING\"] = [state106];\nruleInitialStates[\"DSTRING_CHAR\"] = [state117];\nruleInitialStates[\"SSTRING_CHAR\"] = [state121];\nruleInitialStates[\"ARRAY\"] = [state125];\nruleInitialStates[\"ARRAY_ELEMENT\"] = [state139];\nruleInitialStates[\"OBJECT\"] = [state146];\nruleInitialStates[\"OBJECT_PAIR\"] = [state160];\nruleInitialStates[\"EXPR^1\"] = [state179];\nruleInitialStates[\"EXPR^2\"] = [state188];\nruleInitialStates[\"EXPR^3\"] = [state197];\nruleInitialStates[\"EXPR^4\"] = [state206];\nruleInitialStates[\"EXPR^5\"] = [state229];\nruleInitialStates[\"EXPR^6\"] = [state246];\nruleInitialStates[\"EXPR^7\"] = [state260];\nruleInitialStates[\"EXPR^9\"] = [state280];\nruleInitialStates[\"EXPR^11\"] = [state289];\n\nfunction isValueNode(node) {\n  return node.type === 'Value';\n}\n\nfunction isNumber(node) {\n  return isValueNode(node) && typeof node.value === 'number';\n}\n\nfunction isString(node) {\n  return isValueNode(node) && typeof node.value === 'string';\n}\n\nvar ESCAPE_SEQUENCE = {\n  \"'\": \"'\",\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n};\n\nfunction expandHex(str) {\n  var charCode = parseInt(str, 16);\n  return String.fromCharCode(charCode);\n}\n\nfunction expandEscapeSequence(str) {\n  var re = /\\\\(['\"/\\\\bfnrt]|u([A-Fa-f0-9]{4})|u\\{([A-Fa-f0-9]+)\\})/g;\n  return str.replace(re, (_, esc, u1, u2) => {\n    if (u1) return expandHex(u1);\n    if (u2) return expandHex(u2);\n    return ESCAPE_SEQUENCE[esc];\n  });\n}\n\nclass GroqQueryError extends Error {}\n\nvar BUILDER = {\n  paren(p) {\n    var inner = p.process();\n    return {\n      type: 'Parenthesis',\n      base: inner\n    };\n  },\n\n  filter(p) {\n    var base = p.process();\n    var query = p.process();\n\n    if (isNumber(query)) {\n      return {\n        type: 'Element',\n        base,\n        index: query\n      };\n    }\n\n    if (isString(query)) {\n      return {\n        type: 'Attribute',\n        base,\n        name: query.value\n      };\n    }\n\n    if (query.type === 'Range') {\n      return {\n        type: 'Slice',\n        base,\n        left: query.left,\n        right: query.right,\n        isExclusive: query.isExclusive\n      };\n    }\n\n    return {\n      type: 'Filter',\n      base,\n      query\n    };\n  },\n\n  project(p) {\n    var base = p.process();\n    var query = p.process();\n    return {\n      type: 'Projection',\n      base,\n      query\n    };\n  },\n\n  star() {\n    return {\n      type: 'Star'\n    };\n  },\n\n  this() {\n    return {\n      type: 'This'\n    };\n  },\n\n  parent() {\n    return {\n      type: 'Parent',\n      n: 1\n    };\n  },\n\n  dblparent(p) {\n    var next = p.process();\n    return {\n      type: 'Parent',\n      n: next.n + 1\n    };\n  },\n\n  ident(p) {\n    var name = p.processStringEnd();\n    if (name === 'null') return {\n      type: 'Value',\n      value: null\n    };\n    if (name === 'true') return {\n      type: 'Value',\n      value: true\n    };\n    if (name === 'false') return {\n      type: 'Value',\n      value: false\n    };\n    return {\n      type: 'Identifier',\n      name: name\n    };\n  },\n\n  attr_ident(p) {\n    var base = p.process();\n    var name = p.processString();\n    return {\n      type: 'Attribute',\n      base,\n      name\n    };\n  },\n\n  arr_expr(p) {\n    var base = p.process();\n    return {\n      type: 'Mapper',\n      base\n    };\n  },\n\n  inc_range(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'Range',\n      left,\n      right,\n      isExclusive: false\n    };\n  },\n\n  exc_range(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'Range',\n      left,\n      right,\n      isExclusive: true\n    };\n  },\n\n  neg(p) {\n    var base = p.process();\n\n    if (base.type === 'Value' && typeof base.value === 'number') {\n      return {\n        type: 'Value',\n        value: -base.value\n      };\n    }\n\n    return {\n      type: 'Neg',\n      base\n    };\n  },\n\n  pos(p) {\n    var base = p.process();\n\n    if (isNumber(base)) {\n      return {\n        type: 'Value',\n        value: +base.value\n      };\n    }\n\n    return {\n      type: 'Pos',\n      base\n    };\n  },\n\n  add(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'OpCall',\n      op: '+',\n      left,\n      right\n    };\n  },\n\n  sub(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'OpCall',\n      op: '-',\n      left,\n      right\n    };\n  },\n\n  mul(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'OpCall',\n      op: '*',\n      left,\n      right\n    };\n  },\n\n  div(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'OpCall',\n      op: '/',\n      left,\n      right\n    };\n  },\n\n  mod(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'OpCall',\n      op: '%',\n      left,\n      right\n    };\n  },\n\n  pow(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'OpCall',\n      op: '**',\n      left,\n      right\n    };\n  },\n\n  deref(p) {\n    var base = p.process();\n    var nextMark = p.getMark();\n    var result = {\n      type: 'Deref',\n      base\n    };\n\n    if (nextMark && nextMark.name === 'deref_field') {\n      var name = p.processString();\n      return {\n        type: 'Attribute',\n        base: result,\n        name\n      };\n    }\n\n    return result;\n  },\n\n  comp(p) {\n    var left = p.process();\n    var op = p.processString();\n    var right = p.process();\n    return {\n      type: 'OpCall',\n      op: op,\n      left: left,\n      right: right\n    };\n  },\n\n  str_begin(p) {\n    var value = expandEscapeSequence(p.processStringEnd());\n    return {\n      type: 'Value',\n      value: value\n    };\n  },\n\n  integer(p) {\n    var strValue = p.processStringEnd();\n    return {\n      type: 'Value',\n      value: Number(strValue)\n    };\n  },\n\n  float(p) {\n    var strValue = p.processStringEnd();\n    return {\n      type: 'Value',\n      value: Number(strValue)\n    };\n  },\n\n  sci(p) {\n    var strValue = p.processStringEnd();\n    return {\n      type: 'Value',\n      value: Number(strValue)\n    };\n  },\n\n  pair(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'Pair',\n      left,\n      right\n    };\n  },\n\n  object(p) {\n    var attributes = [];\n\n    while (p.getMark().name !== 'object_end') {\n      attributes.push(p.process());\n    }\n\n    p.shift();\n    return {\n      type: 'Object',\n      attributes\n    };\n  },\n\n  object_expr(p) {\n    var value = p.process();\n\n    if (value.type === 'Pair') {\n      return {\n        type: 'ObjectConditionalSplat',\n        condition: value.left,\n        value: value.right\n      };\n    }\n\n    return {\n      type: 'ObjectAttribute',\n      key: {\n        type: 'Value',\n        value: extractPropertyKey(value)\n      },\n      value: value\n    };\n  },\n\n  object_pair(p) {\n    var key = p.process();\n    var value = p.process();\n    return {\n      type: 'ObjectAttribute',\n      key: key,\n      value: value\n    };\n  },\n\n  object_splat(p) {\n    var value = p.process();\n    return {\n      type: 'ObjectSplat',\n      value\n    };\n  },\n\n  object_splat_this() {\n    return {\n      type: 'ObjectSplat',\n      value: {\n        type: 'This'\n      }\n    };\n  },\n\n  array(p) {\n    var elements = [];\n\n    while (p.getMark().name !== 'array_end') {\n      var isSplat = false;\n\n      if (p.getMark().name === 'array_splat') {\n        isSplat = true;\n        p.shift();\n      }\n\n      var value = p.process();\n      elements.push({\n        type: 'ArrayElement',\n        value,\n        isSplat\n      });\n    }\n\n    p.shift();\n    return {\n      type: 'Array',\n      elements: elements\n    };\n  },\n\n  func_call(p) {\n    var name = p.processStringEnd();\n    var args = [];\n\n    while (p.getMark().name !== 'func_args_end') {\n      args.push(p.process());\n    }\n\n    p.shift();\n    var func = functions[name];\n\n    if (!func) {\n      throw new GroqQueryError(\"Undefined function: \" + name);\n    }\n\n    validateArity(name, func.arity, args.length);\n    return {\n      type: 'FuncCall',\n      func,\n      name,\n      args\n    };\n  },\n\n  pipecall(p) {\n    var base = p.process();\n    var name = p.processString();\n    var args = [];\n\n    while (true) {\n      var markName = p.getMark().name;\n      if (markName === 'func_args_end') break;\n\n      if (name === 'order') {\n        if (markName === 'asc') {\n          p.shift();\n          args.push({\n            type: 'Asc',\n            base: p.process()\n          });\n          continue;\n        } else if (markName === 'desc') {\n          p.shift();\n          args.push({\n            type: 'Desc',\n            base: p.process()\n          });\n          continue;\n        }\n      }\n\n      args.push(p.process());\n    }\n\n    p.shift();\n    var func = pipeFunctions[name];\n\n    if (!func) {\n      throw new GroqQueryError(\"Undefined pipe function: \" + name);\n    }\n\n    validateArity(name, func.arity, args.length);\n    return {\n      type: 'PipeFuncCall',\n      func,\n      base,\n      name: func.name,\n      args\n    };\n  },\n\n  and(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'And',\n      left,\n      right\n    };\n  },\n\n  or(p) {\n    var left = p.process();\n    var right = p.process();\n    return {\n      type: 'Or',\n      left,\n      right\n    };\n  },\n\n  not(p) {\n    var base = p.process();\n    return {\n      type: 'Not',\n      base\n    };\n  },\n\n  asc(p) {\n    throw new GroqQueryError('unexpected asc');\n  },\n\n  desc(p) {\n    throw new GroqQueryError('unexpected desc');\n  },\n\n  param(p) {\n    var name = p.processStringEnd();\n    return {\n      type: 'Parameter',\n      name\n    };\n  }\n\n};\nvar NESTED_PROPERTY_TYPES = ['Deref', 'Projection', 'Mapper', 'Filter', 'Element', 'Slice'];\n\nfunction isNestedPropertyType(node) {\n  return NESTED_PROPERTY_TYPES.includes(node.type);\n}\n\nfunction extractPropertyKey(node) {\n  if (node.type === 'Identifier') {\n    return node.name;\n  }\n\n  if (isNestedPropertyType(node)) {\n    return extractPropertyKey(node.base);\n  }\n\n  throw new GroqQueryError('Cannot determine property key for type: ' + node.type);\n}\n\nfunction validateArity(name, arity, count) {\n  if (typeof arity === 'number') {\n    if (count !== arity) {\n      throw new GroqQueryError(\"Incorrect number of arguments to function \" + name + \"(). Expected \" + arity + \", got \" + count + \".\");\n    }\n  } else if (arity) {\n    if (!arity(count)) {\n      throw new GroqQueryError(\"Incorrect number of arguments to function \" + name + \"().\");\n    }\n  }\n}\n\nclass GroqSyntaxError extends Error {\n  constructor(position) {\n    super(\"Syntax error in GROQ query at position \" + position);\n    this.name = 'GroqSyntaxError';\n    this.position = position;\n  }\n\n}\n/**\r\n * Parses a GROQ query and returns a tree structure.\r\n */\n\n\nfunction parse$1(input) {\n  var result = parse(input);\n  if (result.type === 'error') throw new GroqSyntaxError(result.position);\n  var processor = new MarkProcessor(BUILDER, input, result.marks);\n  return processor.process();\n}\n\nvar isEqual = equality;\n\nfunction equality(_x, _x2) {\n  return _equality.apply(this, arguments);\n}\n\nfunction _equality() {\n  _equality = _asyncToGenerator(function* (a, b) {\n    var aType = a.getType();\n    var bType = b.getType();\n    if (aType !== bType) return false;\n\n    if (aType === 'number' || aType === 'string' || aType === 'boolean' || aType === 'null') {\n      return (yield a.get()) === (yield b.get());\n    }\n\n    return false;\n  });\n  return _equality.apply(this, arguments);\n}\n\nfunction matchText(tokens, patterns) {\n  if (tokens.length === 0 || patterns.length === 0) return false;\n  return patterns.every(pattern => pattern(tokens));\n}\nfunction matchTokenize(text) {\n  return text.match(/[A-Za-z0-9]+/g);\n}\nfunction matchAnalyzePattern(text) {\n  var terms = text.match(/[A-Za-z0-9*]+/g) || [];\n  var termsRe = terms.map(term => new RegExp('^' + term.replace(/\\*/g, '.*') + '$', 'i'));\n  return tokens => termsRe.every(re => tokens.some(token => re.test(token)));\n}\nfunction gatherText(_x, _x2) {\n  return _gatherText.apply(this, arguments);\n}\n\nfunction _gatherText() {\n  _gatherText = _asyncToGenerator(function* (value, cb) {\n    switch (value.getType()) {\n      case 'string':\n        {\n          cb(yield value.get());\n          return true;\n        }\n\n      case 'array':\n        {\n          var success = true;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n\n          var _iteratorError;\n\n          try {\n            for (var _iterator = _asyncIterator(value), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n              var part = _value;\n\n              if (part.getType() === 'string') {\n                cb(yield part.get());\n              } else {\n                success = false;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                yield _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          return success;\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n  });\n  return _gatherText.apply(this, arguments);\n}\n\nvar operators = {\n  '==': /*#__PURE__*/function () {\n    var _eq = /*#__PURE__*/_asyncToGenerator(function* (left, right, scope, execute) {\n      var a = yield execute(left, scope);\n      var b = yield execute(right, scope);\n      var result = yield isEqual(a, b);\n      return result ? TRUE_VALUE : FALSE_VALUE;\n    });\n\n    function eq(_x, _x2, _x3, _x4) {\n      return _eq.apply(this, arguments);\n    }\n\n    return eq;\n  }(),\n  '!=': /*#__PURE__*/function () {\n    var _neq = /*#__PURE__*/_asyncToGenerator(function* (left, right, scope, execute) {\n      var a = yield execute(left, scope);\n      var b = yield execute(right, scope);\n      var result = yield isEqual(a, b);\n      return result ? FALSE_VALUE : TRUE_VALUE;\n    });\n\n    function neq(_x5, _x6, _x7, _x8) {\n      return _neq.apply(this, arguments);\n    }\n\n    return neq;\n  }(),\n  '>': /*#__PURE__*/function () {\n    var _gt = /*#__PURE__*/_asyncToGenerator(function* (left, right, scope, execute) {\n      var a = yield (yield execute(left, scope)).get();\n      var b = yield (yield execute(right, scope)).get();\n      var result = partialCompare(a, b);\n\n      if (result === null) {\n        return NULL_VALUE;\n      } else {\n        return result > 0 ? TRUE_VALUE : FALSE_VALUE;\n      }\n    });\n\n    function gt(_x9, _x10, _x11, _x12) {\n      return _gt.apply(this, arguments);\n    }\n\n    return gt;\n  }(),\n  '>=': /*#__PURE__*/function () {\n    var _gte = /*#__PURE__*/_asyncToGenerator(function* (left, right, scope, execute) {\n      var a = yield (yield execute(left, scope)).get();\n      var b = yield (yield execute(right, scope)).get();\n      var result = partialCompare(a, b);\n\n      if (result === null) {\n        return NULL_VALUE;\n      } else {\n        return result >= 0 ? TRUE_VALUE : FALSE_VALUE;\n      }\n    });\n\n    function gte(_x13, _x14, _x15, _x16) {\n      return _gte.apply(this, arguments);\n    }\n\n    return gte;\n  }(),\n  '<': /*#__PURE__*/function () {\n    var _lt = /*#__PURE__*/_asyncToGenerator(function* (left, right, scope, execute) {\n      var a = yield (yield execute(left, scope)).get();\n      var b = yield (yield execute(right, scope)).get();\n      var result = partialCompare(a, b);\n\n      if (result === null) {\n        return NULL_VALUE;\n      } else {\n        return result < 0 ? TRUE_VALUE : FALSE_VALUE;\n      }\n    });\n\n    function lt(_x17, _x18, _x19, _x20) {\n      return _lt.apply(this, arguments);\n    }\n\n    return lt;\n  }(),\n  '<=': /*#__PURE__*/function () {\n    var _lte = /*#__PURE__*/_asyncToGenerator(function* (left, right, scope, execute) {\n      var a = yield (yield execute(left, scope)).get();\n      var b = yield (yield execute(right, scope)).get();\n      var result = partialCompare(a, b);\n\n      if (result === null) {\n        return NULL_VALUE;\n      } else {\n        return result <= 0 ? TRUE_VALUE : FALSE_VALUE;\n      }\n    });\n\n    function lte(_x21, _x22, _x23, _x24) {\n      return _lte.apply(this, arguments);\n    }\n\n    return lte;\n  }(),\n  in: /*#__PURE__*/function () {\n    var _inop = /*#__PURE__*/_asyncToGenerator(function* (left, right, scope, execute) {\n      var a = yield execute(left, scope);\n      var choices = yield execute(right, scope);\n\n      switch (choices.getType()) {\n        case 'array':\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n\n          var _iteratorError;\n\n          try {\n            for (var _iterator = _asyncIterator(choices), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n              var b = _value;\n\n              if (yield isEqual(a, b)) {\n                return TRUE_VALUE;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                yield _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          return FALSE_VALUE;\n\n        case 'range':\n          var value = yield a.get();\n          var range = yield choices.get();\n          var leftCmp = partialCompare(value, range.left);\n          if (leftCmp === null) return NULL_VALUE;\n          var rightCmp = partialCompare(value, range.right);\n          if (rightCmp === null) return NULL_VALUE;\n\n          if (range.isExclusive()) {\n            return leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE;\n          } else {\n            return leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE;\n          }\n\n        case 'path':\n          if (a.getType() !== 'string') return NULL_VALUE;\n          var str = yield a.get();\n          var path = yield choices.get();\n          return path.matches(str) ? TRUE_VALUE : FALSE_VALUE;\n      }\n\n      return NULL_VALUE;\n    });\n\n    function inop(_x25, _x26, _x27, _x28) {\n      return _inop.apply(this, arguments);\n    }\n\n    return inop;\n  }(),\n  match: /*#__PURE__*/function () {\n    var _match = /*#__PURE__*/_asyncToGenerator(function* (left, right, scope, execute) {\n      var text = yield execute(left, scope);\n      var pattern = yield execute(right, scope);\n      var tokens = [];\n      var patterns = [];\n      yield gatherText(text, part => {\n        tokens = tokens.concat(matchTokenize(part));\n      });\n      var didSucceed = yield gatherText(pattern, part => {\n        patterns = patterns.concat(matchAnalyzePattern(part));\n      });\n      if (!didSucceed) return FALSE_VALUE;\n      var matched = matchText(tokens, patterns);\n      return matched ? TRUE_VALUE : FALSE_VALUE;\n    });\n\n    function match(_x29, _x30, _x31, _x32) {\n      return _match.apply(this, arguments);\n    }\n\n    return match;\n  }(),\n  '+': /*#__PURE__*/function () {\n    var _plus = /*#__PURE__*/_asyncToGenerator(function* (left, right, scope, execute) {\n      var a = yield execute(left, scope);\n      var b = yield execute(right, scope);\n      var aType = a.getType();\n      var bType = b.getType();\n\n      if (aType === 'number' && bType === 'number' || aType === 'string' && bType === 'string') {\n        return new StaticValue((yield a.get()) + (yield b.get()));\n      }\n\n      if (aType === 'array' && bType === 'array') {\n        return new StaticValue((yield a.get()).concat(yield b.get()));\n      }\n\n      if (aType === 'object' && bType === 'object') {\n        return new StaticValue(_extends({}, yield a.get(), yield b.get()));\n      }\n\n      return NULL_VALUE;\n    });\n\n    function plus(_x33, _x34, _x35, _x36) {\n      return _plus.apply(this, arguments);\n    }\n\n    return plus;\n  }(),\n  '-': /*#__PURE__*/numericOperator((a, b) => a - b),\n  '*': /*#__PURE__*/numericOperator((a, b) => a * b),\n  '/': /*#__PURE__*/numericOperator((a, b) => a / b),\n  '%': /*#__PURE__*/numericOperator((a, b) => a % b),\n  '**': /*#__PURE__*/numericOperator((a, b) => Math.pow(a, b))\n};\n\nfunction numericOperator(impl) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (left, right, scope, execute) {\n      var a = yield execute(left, scope);\n      var b = yield execute(right, scope);\n      var aType = a.getType();\n      var bType = b.getType();\n\n      if (aType === 'number' && bType === 'number') {\n        var result = impl(yield a.get(), yield b.get());\n        return fromNumber(result);\n      }\n\n      return NULL_VALUE;\n    });\n\n    return function (_x37, _x38, _x39, _x40) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nfunction inMapper(value, fn) {\n  if (value instanceof MapperValue) {\n    return new MapperValue(new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(value), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          var elementValue = _value;\n          yield fn(elementValue);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    })));\n  } else {\n    return fn(value);\n  }\n}\n\nclass Scope {\n  constructor(params, source, value, parent) {\n    this.params = params;\n    this.source = source;\n    this.value = value;\n    this.parent = parent;\n    this.timestamp = parent ? parent.timestamp : new Date().toISOString();\n  }\n\n  createNested(value) {\n    return new Scope(this.params, this.source, value, this);\n  }\n\n}\n\nfunction execute(node, scope) {\n  if (typeof EXECUTORS[node.type] === 'undefined') {\n    throw new Error('No executor for node.type=' + node.type);\n  }\n\n  var func = EXECUTORS[node.type];\n  return func(node, scope);\n}\n\nvar EXECUTORS = {\n  This(_, scope) {\n    return scope.value;\n  },\n\n  Star(_, scope) {\n    return scope.source;\n  },\n\n  Parameter(_ref6, scope) {\n    var name = _ref6.name;\n    return fromJS(scope.params[name]);\n  },\n\n  Parent(node, scope) {\n    var current = scope;\n\n    for (var i = 0; i < node.n; i++) {\n      if (!current.parent) {\n        return NULL_VALUE;\n      }\n\n      current = current.parent;\n    }\n\n    return current.value;\n  },\n\n  OpCall(_ref7, scope) {\n    var op = _ref7.op,\n        left = _ref7.left,\n        right = _ref7.right;\n    var func = operators[op];\n    if (!func) throw new Error('Unknown operator: ' + op);\n    return func(left, right, scope, execute);\n  },\n\n  FuncCall(_ref8, scope) {\n    var func = _ref8.func,\n        args = _ref8.args;\n    return func(args, scope, execute);\n  },\n\n  PipeFuncCall(_ref9, scope) {\n    return _asyncToGenerator(function* () {\n      var func = _ref9.func,\n          base = _ref9.base,\n          args = _ref9.args;\n      var baseValue = yield execute(base, scope);\n      return func(baseValue, args, scope, execute);\n    })();\n  },\n\n  Filter(_ref10, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref10.base,\n          query = _ref10.query;\n      var baseValue = yield execute(base, scope);\n      return inMapper(baseValue, /*#__PURE__*/function () {\n        var _ref11 = _asyncToGenerator(function* (value) {\n          if (value.getType() !== 'array') return NULL_VALUE;\n          return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n\n            var _iteratorError2;\n\n            try {\n              for (var _iterator2 = _asyncIterator(value), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n                var element = _value2;\n                var newScope = scope.createNested(element);\n                var condValue = yield _awaitAsyncGenerator(execute(query, newScope));\n                if (condValue.getBoolean()) yield element;\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  yield _awaitAsyncGenerator(_iterator2.return());\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }));\n        });\n\n        return function (_x) {\n          return _ref11.apply(this, arguments);\n        };\n      }());\n    })();\n  },\n\n  Element(_ref12, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref12.base,\n          index = _ref12.index;\n      var baseValue = yield execute(base, scope);\n      return inMapper(baseValue, /*#__PURE__*/function () {\n        var _ref13 = _asyncToGenerator(function* (arrayValue) {\n          if (arrayValue.getType() !== 'array') return NULL_VALUE;\n          var idxValue = yield execute(index, scope);\n          if (idxValue.getType() !== 'number') return NULL_VALUE; // OPT: Here we can optimize when idx >= 0\n\n          var array = yield arrayValue.get();\n          var idx = yield idxValue.get();\n\n          if (idx < 0) {\n            idx = array.length + idx;\n          }\n\n          if (idx >= 0 && idx < array.length) {\n            return new StaticValue(array[idx]);\n          } else {\n            // Make sure we return `null` for out-of-bounds access\n            return NULL_VALUE;\n          }\n        });\n\n        return function (_x2) {\n          return _ref13.apply(this, arguments);\n        };\n      }());\n    })();\n  },\n\n  Slice(_ref14, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref14.base,\n          left = _ref14.left,\n          right = _ref14.right,\n          isExclusive = _ref14.isExclusive;\n      var baseValue = yield execute(base, scope);\n      return inMapper(baseValue, /*#__PURE__*/function () {\n        var _ref15 = _asyncToGenerator(function* (arrayValue) {\n          if (arrayValue.getType() !== 'array') return NULL_VALUE;\n          var leftIdxValue = yield execute(left, scope);\n          var rightIdxValue = yield execute(right, scope);\n\n          if (leftIdxValue.getType() !== 'number' || rightIdxValue.getType() !== 'number') {\n            return NULL_VALUE;\n          } // OPT: Here we can optimize when either indices are >= 0\n\n\n          var array = yield arrayValue.get();\n          var leftIdx = yield leftIdxValue.get();\n          var rightIdx = yield rightIdxValue.get(); // Handle negative index\n\n          if (leftIdx < 0) leftIdx = array.length + leftIdx;\n          if (rightIdx < 0) rightIdx = array.length + rightIdx; // Convert from inclusive to exclusive index\n\n          if (!isExclusive) rightIdx++;\n          if (leftIdx < 0) leftIdx = 0;\n          if (rightIdx < 0) rightIdx = 0; // Note: At this point the indices might point out-of-bound, but\n          // .slice handles this correctly.\n\n          return new StaticValue(array.slice(leftIdx, rightIdx));\n        });\n\n        return function (_x3) {\n          return _ref15.apply(this, arguments);\n        };\n      }());\n    })();\n  },\n\n  Attribute(_ref16, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref16.base,\n          name = _ref16.name;\n      var baseValue = yield execute(base, scope);\n      return inMapper(baseValue, /*#__PURE__*/function () {\n        var _ref17 = _asyncToGenerator(function* (value) {\n          if (value.getType() === 'object') {\n            var data = yield value.get();\n\n            if (data.hasOwnProperty(name)) {\n              return new StaticValue(data[name]);\n            }\n          }\n\n          return NULL_VALUE;\n        });\n\n        return function (_x4) {\n          return _ref17.apply(this, arguments);\n        };\n      }());\n    })();\n  },\n\n  Identifier(_ref18, scope) {\n    return _asyncToGenerator(function* () {\n      var name = _ref18.name;\n\n      if (scope.value.getType() === 'object') {\n        var data = yield scope.value.get();\n\n        if (data.hasOwnProperty(name)) {\n          return new StaticValue(data[name]);\n        }\n      }\n\n      return NULL_VALUE;\n    })();\n  },\n\n  Value(_ref19) {\n    var value = _ref19.value;\n    return new StaticValue(value);\n  },\n\n  Mapper(_ref20, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref20.base;\n      var baseValue = yield execute(base, scope);\n      if (baseValue.getType() !== 'array') return baseValue;\n\n      if (baseValue instanceof MapperValue) {\n        return new MapperValue(new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n\n          var _iteratorError3;\n\n          try {\n            for (var _iterator3 = _asyncIterator(baseValue), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n              var element = _value3;\n\n              if (element.getType() === 'array') {\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n\n                var _iteratorError4;\n\n                try {\n                  for (var _iterator4 = _asyncIterator(element), _step4, _value4; _step4 = yield _awaitAsyncGenerator(_iterator4.next()), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _awaitAsyncGenerator(_step4.value), !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {\n                    var subelement = _value4;\n                    yield subelement;\n                  }\n                } catch (err) {\n                  _didIteratorError4 = true;\n                  _iteratorError4 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                      yield _awaitAsyncGenerator(_iterator4.return());\n                    }\n                  } finally {\n                    if (_didIteratorError4) {\n                      throw _iteratorError4;\n                    }\n                  }\n                }\n              } else {\n                yield NULL_VALUE;\n              }\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                yield _awaitAsyncGenerator(_iterator3.return());\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        })));\n      } else {\n        return new MapperValue(baseValue);\n      }\n    })();\n  },\n\n  Parenthesis(_ref21, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref21.base;\n      var baseValue = yield execute(base, scope);\n\n      if (baseValue instanceof MapperValue) {\n        baseValue = baseValue.value;\n      }\n\n      return baseValue;\n    })();\n  },\n\n  Projection(_ref22, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref22.base,\n          query = _ref22.query;\n      var baseValue = yield execute(base, scope);\n      if (baseValue.getType() === 'null') return NULL_VALUE;\n\n      if (baseValue.getType() === 'array') {\n        return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n\n          var _iteratorError5;\n\n          try {\n            for (var _iterator5 = _asyncIterator(baseValue), _step5, _value5; _step5 = yield _awaitAsyncGenerator(_iterator5.next()), _iteratorNormalCompletion5 = _step5.done, _value5 = yield _awaitAsyncGenerator(_step5.value), !_iteratorNormalCompletion5; _iteratorNormalCompletion5 = true) {\n              var value = _value5;\n\n              var _newScope = scope.createNested(value);\n\n              var newValue = yield _awaitAsyncGenerator(execute(query, _newScope));\n              yield newValue;\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                yield _awaitAsyncGenerator(_iterator5.return());\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        }));\n      }\n\n      var newScope = scope.createNested(baseValue);\n      return yield execute(query, newScope);\n    })();\n  },\n\n  Deref(_ref23, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref23.base;\n      var baseValue = yield execute(base, scope);\n      return inMapper(baseValue, /*#__PURE__*/function () {\n        var _ref24 = _asyncToGenerator(function* (baseValue) {\n          if (scope.source.getType() !== 'array') return NULL_VALUE;\n          if (baseValue.getType() !== 'object') return NULL_VALUE;\n          var id = (yield baseValue.get())._ref;\n          if (typeof id !== 'string') return NULL_VALUE;\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n\n          var _iteratorError6;\n\n          try {\n            for (var _iterator6 = _asyncIterator(scope.source), _step6, _value6; _step6 = yield _iterator6.next(), _iteratorNormalCompletion6 = _step6.done, _value6 = yield _step6.value, !_iteratorNormalCompletion6; _iteratorNormalCompletion6 = true) {\n              var doc = _value6;\n\n              if (id === doc.data._id) {\n                return doc;\n              }\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                yield _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n\n          return NULL_VALUE;\n        });\n\n        return function (_x5) {\n          return _ref24.apply(this, arguments);\n        };\n      }());\n    })();\n  },\n\n  Object(_ref25, scope) {\n    return _asyncToGenerator(function* () {\n      var attributes = _ref25.attributes;\n      var result = {};\n\n      for (var _iterator8 = _createForOfIteratorHelperLoose(attributes), _step8; !(_step8 = _iterator8()).done;) {\n        var attr = _step8.value;\n        var attrType = attr.type;\n\n        switch (attr.type) {\n          case 'ObjectAttribute':\n            {\n              var key = yield execute(attr.key, scope);\n              if (key.getType() !== 'string') continue;\n              var value = yield execute(attr.value, scope);\n\n              if (value.getType() === 'null') {\n                delete result[key.data];\n                break;\n              }\n\n              result[key.data] = yield value.get();\n              break;\n            }\n\n          case 'ObjectConditionalSplat':\n            {\n              var cond = yield execute(attr.condition, scope);\n              if (!cond.getBoolean()) continue;\n\n              var _value8 = yield execute(attr.value, scope);\n\n              if (_value8.getType() !== 'object') continue;\n              Object.assign(result, _value8.data);\n              break;\n            }\n\n          case 'ObjectSplat':\n            {\n              var _value9 = yield execute(attr.value, scope);\n\n              if (_value9.getType('object')) {\n                Object.assign(result, _value9.data);\n              }\n\n              break;\n            }\n\n          default:\n            throw new Error('Unknown node type: ' + attrType);\n        }\n      }\n\n      return new StaticValue(result);\n    })();\n  },\n\n  Array(_ref26, scope) {\n    var elements = _ref26.elements;\n    return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {\n      for (var _iterator9 = _createForOfIteratorHelperLoose(elements), _step9; !(_step9 = _iterator9()).done;) {\n        var element = _step9.value;\n        var value = yield _awaitAsyncGenerator(execute(element.value, scope));\n\n        if (element.isSplat) {\n          if (value.getType() === 'array') {\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n\n            var _iteratorError7;\n\n            try {\n              for (var _iterator7 = _asyncIterator(value), _step7, _value7; _step7 = yield _awaitAsyncGenerator(_iterator7.next()), _iteratorNormalCompletion7 = _step7.done, _value7 = yield _awaitAsyncGenerator(_step7.value), !_iteratorNormalCompletion7; _iteratorNormalCompletion7 = true) {\n                var v = _value7;\n                yield v;\n              }\n            } catch (err) {\n              _didIteratorError7 = true;\n              _iteratorError7 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                  yield _awaitAsyncGenerator(_iterator7.return());\n                }\n              } finally {\n                if (_didIteratorError7) {\n                  throw _iteratorError7;\n                }\n              }\n            }\n          }\n        } else {\n          yield value;\n        }\n      }\n    }));\n  },\n\n  Range(_ref27, scope) {\n    return _asyncToGenerator(function* () {\n      var left = _ref27.left,\n          right = _ref27.right,\n          isExclusive = _ref27.isExclusive;\n      var leftValue = yield execute(left, scope);\n      var rightValue = yield execute(right, scope);\n\n      if (!Range.isConstructible(leftValue.getType(), rightValue.getType())) {\n        return NULL_VALUE;\n      }\n\n      var range = new Range(yield leftValue.get(), yield rightValue.get(), isExclusive);\n      return new StaticValue(range);\n    })();\n  },\n\n  Pair(_ref28, scope) {\n    return _asyncToGenerator(function* () {\n      var left = _ref28.left,\n          right = _ref28.right;\n      var leftValue = yield execute(left, scope);\n      var rightValue = yield execute(right, scope);\n      var pair = new Pair(yield leftValue.get(), yield rightValue.get());\n      return new StaticValue(pair);\n    })();\n  },\n\n  Or(_ref29, scope) {\n    return _asyncToGenerator(function* () {\n      var left = _ref29.left,\n          right = _ref29.right;\n      var leftValue = yield execute(left, scope);\n      var rightValue = yield execute(right, scope);\n\n      if (leftValue.getType() === 'boolean') {\n        if (leftValue.data === true) return TRUE_VALUE;\n      }\n\n      if (rightValue.getType() === 'boolean') {\n        if (rightValue.data === true) return TRUE_VALUE;\n      }\n\n      if (leftValue.getType() !== 'boolean') return NULL_VALUE;\n      if (rightValue.getType() !== 'boolean') return NULL_VALUE;\n      return FALSE_VALUE;\n    })();\n  },\n\n  And(_ref30, scope) {\n    return _asyncToGenerator(function* () {\n      var left = _ref30.left,\n          right = _ref30.right;\n      var leftValue = yield execute(left, scope);\n      var rightValue = yield execute(right, scope);\n\n      if (leftValue.getType() === 'boolean') {\n        if (leftValue.data === false) return FALSE_VALUE;\n      }\n\n      if (rightValue.getType() === 'boolean') {\n        if (rightValue.data === false) return FALSE_VALUE;\n      }\n\n      if (leftValue.getType() !== 'boolean') return NULL_VALUE;\n      if (rightValue.getType() !== 'boolean') return NULL_VALUE;\n      return TRUE_VALUE;\n    })();\n  },\n\n  Not(_ref31, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref31.base;\n      var value = yield execute(base, scope);\n\n      if (value.getType() !== 'boolean') {\n        return NULL_VALUE;\n      }\n\n      return value.getBoolean() ? FALSE_VALUE : TRUE_VALUE;\n    })();\n  },\n\n  Neg(_ref32, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref32.base;\n      var value = yield execute(base, scope);\n      if (value.getType() !== 'number') return NULL_VALUE;\n      return fromNumber(-(yield value.get()));\n    })();\n  },\n\n  Pos(_ref33, scope) {\n    return _asyncToGenerator(function* () {\n      var base = _ref33.base;\n      var value = yield execute(base, scope);\n      if (value.getType() !== 'number') return NULL_VALUE;\n      return fromNumber(yield value.get());\n    })();\n  },\n\n  Asc() {\n    return _asyncToGenerator(function* () {\n      return NULL_VALUE;\n    })();\n  },\n\n  Desc() {\n    return _asyncToGenerator(function* () {\n      return NULL_VALUE;\n    })();\n  }\n\n};\n/**\r\n * Evaluates a query.\r\n */\n\nfunction evaluate(_x6, _x7) {\n  return _evaluate.apply(this, arguments);\n}\n\nfunction _evaluate() {\n  _evaluate = _asyncToGenerator(function* (tree, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var root = fromJS(options.root);\n    var dataset = fromJS(options.dataset);\n\n    var params = _extends({}, options.params);\n\n    var scope = new Scope(params, dataset, root, null);\n    return yield execute(tree, scope);\n  });\n  return _evaluate.apply(this, arguments);\n}\n\n\n//# sourceMappingURL=groq-js.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/groq-js/dist/groq-js.esm.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/incremental-patcher.js":
/*!*************************************************************!*\
  !*** ./node_modules/mendoza/lib/esm/incremental-patcher.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"wrap\": function() { return /* binding */ wrap; },\n/* harmony export */   \"unwrap\": function() { return /* binding */ unwrap; },\n/* harmony export */   \"getType\": function() { return /* binding */ getType; },\n/* harmony export */   \"rebaseValue\": function() { return /* binding */ rebaseValue; },\n/* harmony export */   \"applyPatch\": function() { return /* binding */ applyPatch; }\n/* harmony export */ });\n/* harmony import */ var _internal_patcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal-patcher */ \"./node_modules/mendoza/lib/esm/internal-patcher.js\");\n/* harmony import */ var _utf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utf8 */ \"./node_modules/mendoza/lib/esm/utf8.js\");\n\n\nvar Model = /** @class */ (function () {\n    function Model(meta) {\n        this.meta = meta;\n    }\n    Model.prototype.wrap = function (data) {\n        return this.wrapWithMeta(data, this.meta, this.meta);\n    };\n    Model.prototype.wrapWithMeta = function (data, startMeta, endMeta) {\n        if (endMeta === void 0) { endMeta = this.meta; }\n        return { data: data, startMeta: startMeta, endMeta: endMeta };\n    };\n    Model.prototype.asObject = function (value) {\n        if (!value.content) {\n            var fields = {};\n            for (var _i = 0, _a = Object.entries(value.data); _i < _a.length; _i++) {\n                var _b = _a[_i], key = _b[0], val = _b[1];\n                fields[key] = this.wrapWithMeta(val, value.startMeta);\n            }\n            value.content = { type: 'object', fields: fields };\n        }\n        return value.content;\n    };\n    Model.prototype.asArray = function (value) {\n        var _this = this;\n        if (!value.content) {\n            var elements = value.data.map(function (item) { return _this.wrapWithMeta(item, value.startMeta); });\n            var metas = elements.map(function () { return _this.meta; });\n            value.content = { type: 'array', elements: elements, metas: metas };\n        }\n        return value.content;\n    };\n    Model.prototype.asString = function (value) {\n        if (!value.content) {\n            var str = value.data;\n            var part = {\n                value: str,\n                utf8size: (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8stringSize)(str),\n                uses: [],\n                startMeta: value.startMeta,\n                endMeta: value.endMeta\n            };\n            value.content = this.stringFromParts([part]);\n        }\n        return value.content;\n    };\n    Model.prototype.stringFromParts = function (parts) {\n        var str = {\n            type: 'string',\n            parts: parts\n        };\n        for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n            var part = parts_1[_i];\n            part.uses.push(str);\n        }\n        return str;\n    };\n    Model.prototype.objectGetKeys = function (value) {\n        if (value.content) {\n            return Object.keys(value.content.fields);\n        }\n        else {\n            return Object.keys(value.data);\n        }\n    };\n    Model.prototype.objectGetField = function (value, key) {\n        var obj = this.asObject(value);\n        return obj.fields[key];\n    };\n    Model.prototype.arrayGetElement = function (value, idx) {\n        var arr = this.asArray(value);\n        return arr.elements[idx];\n    };\n    Model.prototype.finalize = function (content) {\n        this.updateEndMeta(content);\n        return { content: content, startMeta: this.meta, endMeta: this.meta };\n    };\n    Model.prototype.markChanged = function (value) {\n        return this.wrap(unwrap(value));\n    };\n    Model.prototype.updateEndMeta = function (content) {\n        if (content.type == 'string') {\n            for (var _i = 0, _a = content.parts; _i < _a.length; _i++) {\n                var part = _a[_i];\n                part.endMeta = this.meta;\n            }\n        }\n        else {\n            if (content.type === 'array') {\n                for (var _b = 0, _c = content.elements; _b < _c.length; _b++) {\n                    var val = _c[_b];\n                    if (val.content && val.endMeta !== this.meta) {\n                        this.updateEndMeta(val.content);\n                    }\n                    val.endMeta = this.meta;\n                }\n            }\n            else {\n                for (var _d = 0, _e = Object.values(content.fields); _d < _e.length; _d++) {\n                    var val = _e[_d];\n                    if (val.content && val.endMeta !== this.meta) {\n                        this.updateEndMeta(val.content);\n                    }\n                    val.endMeta = this.meta;\n                }\n            }\n        }\n    };\n    Model.prototype.copyString = function (value) {\n        if (value) {\n            var other = this.asString(value);\n            return this.stringFromParts(other.parts.slice());\n        }\n        else {\n            return {\n                type: 'string',\n                parts: []\n            };\n        }\n    };\n    Model.prototype.copyObject = function (value) {\n        var obj = {\n            type: 'object',\n            fields: {}\n        };\n        if (value) {\n            var other = this.asObject(value);\n            Object.assign(obj.fields, other.fields);\n        }\n        return obj;\n    };\n    Model.prototype.copyArray = function (value) {\n        var arr = value ? this.asArray(value) : null;\n        var elements = arr ? arr.elements : [];\n        var metas = arr ? arr.metas : [];\n        return {\n            type: 'array',\n            elements: elements,\n            metas: metas\n        };\n    };\n    Model.prototype.objectSetField = function (target, key, value) {\n        target.fields[key] = value;\n    };\n    Model.prototype.objectDeleteField = function (target, key) {\n        delete target.fields[key];\n    };\n    Model.prototype.arrayAppendValue = function (target, value) {\n        target.elements.push(value);\n        target.metas.push(this.meta);\n    };\n    Model.prototype.arrayAppendSlice = function (target, source, left, right) {\n        var _a, _b;\n        var arr = this.asArray(source);\n        var samePosition = arr.elements.length === left;\n        (_a = target.elements).push.apply(_a, arr.elements.slice(left, right));\n        if (samePosition) {\n            (_b = target.metas).push.apply(_b, arr.metas.slice(left, right));\n        }\n        else {\n            for (var i = left; i < right; i++) {\n                target.metas.push(this.meta);\n            }\n        }\n    };\n    Model.prototype.stringAppendValue = function (target, value) {\n        var str = this.asString(value);\n        for (var _i = 0, _a = str.parts; _i < _a.length; _i++) {\n            var part = _a[_i];\n            this.stringAppendPart(target, part);\n        }\n    };\n    Model.prototype.stringAppendPart = function (target, part) {\n        target.parts.push(part);\n        part.uses.push(target);\n    };\n    Model.prototype.resolveStringPart = function (str, from, len) {\n        if (len === 0)\n            return from;\n        for (var i = from; i < str.parts.length; i++) {\n            var part = str.parts[i];\n            if (len === part.utf8size) {\n                // Matches perfect!\n                return i + 1;\n            }\n            if (len < part.utf8size) {\n                // It's a part of this chunk. We now need to split it up.\n                this.splitString(part, len);\n                return i + 1;\n            }\n            len -= part.utf8size;\n        }\n        throw new Error('splitting string out of bounds');\n    };\n    Model.prototype.splitString = function (part, idx) {\n        var leftValue;\n        var rightValue;\n        var leftSize = idx;\n        var rightSize = part.utf8size - leftSize;\n        // idx is here in UTF-8 index, not codepoint index.\n        // This means we might to adjust for multi-byte characters.\n        if (part.utf8size !== part.value.length) {\n            var byteCount = 0;\n            for (idx = 0; byteCount < leftSize; idx++) {\n                var code = part.value.codePointAt(idx);\n                var size = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8charSize)(code);\n                if (size === 4)\n                    idx++; // Surrogate pair.\n                byteCount += size;\n            }\n        }\n        leftValue = part.value.slice(0, idx);\n        rightValue = part.value.slice(idx);\n        var newPart = {\n            value: rightValue,\n            utf8size: rightSize,\n            uses: part.uses.slice(),\n            startMeta: part.startMeta,\n            endMeta: part.endMeta\n        };\n        part.value = leftValue;\n        part.utf8size = leftSize;\n        for (var _i = 0, _a = part.uses; _i < _a.length; _i++) {\n            var use = _a[_i];\n            // Insert the new part.\n            var idx_1 = use.parts.indexOf(part);\n            if (idx_1 === -1)\n                throw new Error('bug: mismatch between string parts and use.');\n            use.parts.splice(idx_1 + 1, 0, newPart);\n        }\n    };\n    Model.prototype.stringAppendSlice = function (target, source, left, right) {\n        var str = this.asString(source);\n        var firstPart = this.resolveStringPart(str, 0, left);\n        var lastPart = this.resolveStringPart(str, firstPart, right - left);\n        for (var i = firstPart; i < lastPart; i++) {\n            var part = str.parts[i];\n            this.stringAppendPart(target, part);\n        }\n    };\n    return Model;\n}());\n// Turns a native JavaScript object into a Value with a given origin.\nfunction wrap(data, meta) {\n    return { data: data, startMeta: meta, endMeta: meta };\n}\n// Converts a Value into a native JavaScript type.\nfunction unwrap(value) {\n    if (typeof value.data !== 'undefined')\n        return value.data;\n    var result;\n    var content = value.content;\n    switch (content.type) {\n        case 'string':\n            result = content.parts.map(function (part) { return part.value; }).join('');\n            break;\n        case 'array':\n            result = content.elements.map(function (val) { return unwrap(val); });\n            break;\n        case 'object': {\n            result = {};\n            for (var _i = 0, _a = Object.entries(content.fields); _i < _a.length; _i++) {\n                var _b = _a[_i], key = _b[0], val = _b[1];\n                result[key] = unwrap(val);\n            }\n        }\n    }\n    value.data = result;\n    return result;\n}\n// Returns the type of a Value.\nfunction getType(value) {\n    if (value.content)\n        return value.content.type;\n    if (Array.isArray(value.data))\n        return 'array';\n    if (value.data === null)\n        return 'null';\n    return typeof value.data;\n}\n// Updates the `right` value such that it reuses as much as possible from the `left` value.\nfunction rebaseValue(left, right) {\n    var leftType = getType(left);\n    var rightType = getType(right);\n    if (leftType !== rightType)\n        return right;\n    var leftModel = new Model(left.endMeta);\n    var rightModel = new Model(right.endMeta);\n    switch (leftType) {\n        case 'object': {\n            var leftObj = leftModel.asObject(left);\n            var rightObj = rightModel.asObject(right);\n            // Number of fields which are identical in left and right.\n            var identicalFieldCount = 0;\n            var leftFieldCount = Object.keys(leftObj.fields).length;\n            var rightFieldCount = Object.keys(rightObj.fields).length;\n            for (var _i = 0, _a = Object.entries(rightObj.fields); _i < _a.length; _i++) {\n                var _b = _a[_i], key = _b[0], rightVal = _b[1];\n                var leftVal = leftObj.fields[key];\n                if (leftVal) {\n                    rightObj.fields[key] = rebaseValue(leftVal, rightVal);\n                    if (rightObj.fields[key] === leftVal) {\n                        identicalFieldCount++;\n                    }\n                }\n            }\n            var isIdentical = leftFieldCount === rightFieldCount && leftFieldCount === identicalFieldCount;\n            return isIdentical ? left : right;\n        }\n        case 'array': {\n            var leftArr = leftModel.asArray(left);\n            var rightArr = rightModel.asArray(right);\n            if (leftArr.elements.length !== rightArr.elements.length) {\n                break;\n            }\n            var numRebased = 0;\n            for (var i = 0; i < rightArr.elements.length; i++) {\n                rightArr.elements[i] = rebaseValue(leftArr.elements[i], rightArr.elements[i]);\n                if (rightArr.elements[i] !== leftArr.elements[i]) {\n                    numRebased++;\n                }\n            }\n            return numRebased === 0 ? left : right;\n        }\n        case 'null':\n        case 'boolean':\n        case 'number': {\n            if (unwrap(left) === unwrap(right))\n                return left;\n            break;\n        }\n        case 'string': {\n            var leftRaw = unwrap(left);\n            var rightRaw = unwrap(right);\n            if (leftRaw === rightRaw)\n                return left;\n            var result = rightModel.copyString(null);\n            var prefix = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.commonPrefix)(leftRaw, rightRaw);\n            var suffix = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.commonSuffix)(leftRaw, rightRaw, prefix);\n            var rightLen = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8stringSize)(rightRaw);\n            var leftLen = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8stringSize)(leftRaw);\n            if (0 < prefix) {\n                rightModel.stringAppendSlice(result, left, 0, prefix);\n            }\n            if (prefix < rightLen - suffix) {\n                rightModel.stringAppendSlice(result, right, prefix, rightLen - suffix);\n            }\n            if (leftLen - suffix < leftLen) {\n                rightModel.stringAppendSlice(result, left, leftLen - suffix, leftLen);\n            }\n            var value = rightModel.finalize(result);\n            if (unwrap(value) !== rightRaw)\n                throw new Error('incorrect string rebase');\n            return value;\n        }\n    }\n    return right;\n}\nfunction applyPatch(left, patch, startMeta) {\n    var model = new Model(startMeta);\n    var patcher = new _internal_patcher__WEBPACK_IMPORTED_MODULE_1__.Patcher(model, left, patch);\n    return patcher.process();\n}\n//# sourceMappingURL=incremental-patcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/incremental-patcher.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/index.js":
/*!***********************************************!*\
  !*** ./node_modules/mendoza/lib/esm/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"incremental\": function() { return /* reexport module object */ _incremental_patcher__WEBPACK_IMPORTED_MODULE_0__; },\n/* harmony export */   \"applyPatch\": function() { return /* reexport safe */ _simple_patcher__WEBPACK_IMPORTED_MODULE_1__.applyPatch; }\n/* harmony export */ });\n/* harmony import */ var _incremental_patcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./incremental-patcher */ \"./node_modules/mendoza/lib/esm/incremental-patcher.js\");\n/* harmony import */ var _simple_patcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simple-patcher */ \"./node_modules/mendoza/lib/esm/simple-patcher.js\");\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21lbmRvemEvbGliL2VzbS9pbmRleC5qcz9jYjgxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUQ7QUFDZjtBQUNNO0FBQzlDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL21lbmRvemEvbGliL2VzbS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGluY3JlbWVudGFsXzEgZnJvbSAnLi9pbmNyZW1lbnRhbC1wYXRjaGVyJztcbmV4cG9ydCB7IGluY3JlbWVudGFsXzEgYXMgaW5jcmVtZW50YWwgfTtcbmV4cG9ydCB7IGFwcGx5UGF0Y2ggfSBmcm9tICcuL3NpbXBsZS1wYXRjaGVyJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/index.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/internal-patcher.js":
/*!**********************************************************!*\
  !*** ./node_modules/mendoza/lib/esm/internal-patcher.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Patcher\": function() { return /* binding */ Patcher; }\n/* harmony export */ });\nvar OPS = [\n    'Value',\n    'Copy',\n    'Blank',\n    'ReturnIntoArray',\n    'ReturnIntoObject',\n    'ReturnIntoObjectSameKey',\n    'PushField',\n    'PushElement',\n    'PushParent',\n    'Pop',\n    'PushFieldCopy',\n    'PushFieldBlank',\n    'PushElementCopy',\n    'PushElementBlank',\n    'ReturnIntoObjectPop',\n    'ReturnIntoObjectSameKeyPop',\n    'ReturnIntoArrayPop',\n    'ObjectSetFieldValue',\n    'ObjectCopyField',\n    'ObjectDeleteField',\n    'ArrayAppendValue',\n    'ArrayAppendSlice',\n    'StringAppendString',\n    'StringAppendSlice'\n];\nvar Patcher = /** @class */ (function () {\n    function Patcher(model, root, patch) {\n        this.i = 0;\n        this.inputStack = [];\n        this.outputStack = [];\n        this.model = model;\n        this.root = root;\n        this.patch = patch;\n    }\n    Patcher.prototype.read = function () {\n        return this.patch[this.i++];\n    };\n    Patcher.prototype.process = function () {\n        this.inputStack.push({ value: this.root });\n        this.outputStack.push({ value: this.root });\n        for (; this.i < this.patch.length;) {\n            var opcode = this.read();\n            var op = OPS[opcode];\n            if (!op)\n                throw new Error(\"Unknown opcode: \" + opcode);\n            var processor = \"process\" + op;\n            this[processor].apply(this);\n        }\n        var entry = this.outputStack.pop();\n        return this.finalizeOutput(entry);\n    };\n    Patcher.prototype.inputEntry = function () {\n        return this.inputStack[this.inputStack.length - 1];\n    };\n    Patcher.prototype.inputKey = function (entry, idx) {\n        if (!entry.keys) {\n            entry.keys = this.model.objectGetKeys(entry.value).sort();\n        }\n        return entry.keys[idx];\n    };\n    Patcher.prototype.outputEntry = function () {\n        return this.outputStack[this.outputStack.length - 1];\n    };\n    Patcher.prototype.outputArray = function () {\n        var entry = this.outputEntry();\n        if (!entry.writeValue) {\n            entry.writeValue = this.model.copyArray(entry.value);\n        }\n        return entry.writeValue;\n    };\n    Patcher.prototype.outputObject = function () {\n        var entry = this.outputEntry();\n        if (!entry.writeValue) {\n            entry.writeValue = this.model.copyObject(entry.value);\n        }\n        return entry.writeValue;\n    };\n    Patcher.prototype.outputString = function () {\n        var entry = this.outputEntry();\n        if (!entry.writeValue) {\n            entry.writeValue = this.model.copyString(entry.value);\n        }\n        return entry.writeValue;\n    };\n    Patcher.prototype.finalizeOutput = function (entry) {\n        if (entry.writeValue) {\n            return this.model.finalize(entry.writeValue);\n        }\n        else {\n            return entry.value;\n        }\n    };\n    // Processors:\n    Patcher.prototype.processValue = function () {\n        var value = this.model.wrap(this.read());\n        this.outputStack.push({ value: value });\n    };\n    Patcher.prototype.processCopy = function () {\n        var input = this.inputEntry();\n        this.outputStack.push({ value: input.value });\n    };\n    Patcher.prototype.processBlank = function () {\n        this.outputStack.push({ value: null });\n    };\n    Patcher.prototype.processReturnIntoArray = function () {\n        var entry = this.outputStack.pop();\n        var result = this.finalizeOutput(entry);\n        var arr = this.outputArray();\n        this.model.arrayAppendValue(arr, result);\n    };\n    Patcher.prototype.processReturnIntoObject = function () {\n        var key = this.read();\n        var entry = this.outputStack.pop();\n        var result = this.finalizeOutput(entry);\n        result = this.model.markChanged(result);\n        var obj = this.outputObject();\n        this.model.objectSetField(obj, key, result);\n    };\n    Patcher.prototype.processReturnIntoObjectSameKey = function () {\n        var input = this.inputEntry();\n        var entry = this.outputStack.pop();\n        var result = this.finalizeOutput(entry);\n        var obj = this.outputObject();\n        this.model.objectSetField(obj, input.key, result);\n    };\n    Patcher.prototype.processPushField = function () {\n        var idx = this.read();\n        var entry = this.inputEntry();\n        var key = this.inputKey(entry, idx);\n        var value = this.model.objectGetField(entry.value, key);\n        this.inputStack.push({ value: value, key: key });\n    };\n    Patcher.prototype.processPushElement = function () {\n        var idx = this.read();\n        var entry = this.inputEntry();\n        var value = this.model.arrayGetElement(entry.value, idx);\n        this.inputStack.push({ value: value });\n    };\n    Patcher.prototype.processPop = function () {\n        this.inputStack.pop();\n    };\n    Patcher.prototype.processPushFieldCopy = function () {\n        this.processPushField();\n        this.processCopy();\n    };\n    Patcher.prototype.processPushFieldBlank = function () {\n        this.processPushField();\n        this.processBlank();\n    };\n    Patcher.prototype.processPushElementCopy = function () {\n        this.processPushElement();\n        this.processCopy();\n    };\n    Patcher.prototype.processPushElementBlank = function () {\n        this.processPushElement();\n        this.processBlank();\n    };\n    Patcher.prototype.processReturnIntoObjectPop = function () {\n        this.processReturnIntoObject();\n        this.processPop();\n    };\n    Patcher.prototype.processReturnIntoObjectSameKeyPop = function () {\n        this.processReturnIntoObjectSameKey();\n        this.processPop();\n    };\n    Patcher.prototype.processReturnIntoArrayPop = function () {\n        this.processReturnIntoArray();\n        this.processPop();\n    };\n    Patcher.prototype.processObjectSetFieldValue = function () {\n        this.processValue();\n        this.processReturnIntoObject();\n    };\n    Patcher.prototype.processObjectCopyField = function () {\n        this.processPushField();\n        this.processCopy();\n        this.processReturnIntoObjectSameKey();\n        this.processPop();\n    };\n    Patcher.prototype.processObjectDeleteField = function () {\n        var idx = this.read();\n        var entry = this.inputEntry();\n        var key = this.inputKey(entry, idx);\n        var obj = this.outputObject();\n        this.model.objectDeleteField(obj, key);\n    };\n    Patcher.prototype.processArrayAppendValue = function () {\n        var value = this.model.wrap(this.read());\n        var arr = this.outputArray();\n        this.model.arrayAppendValue(arr, value);\n    };\n    Patcher.prototype.processArrayAppendSlice = function () {\n        var left = this.read();\n        var right = this.read();\n        var str = this.outputArray();\n        var val = this.inputEntry().value;\n        this.model.arrayAppendSlice(str, val, left, right);\n    };\n    Patcher.prototype.processStringAppendString = function () {\n        var value = this.model.wrap(this.read());\n        var str = this.outputString();\n        this.model.stringAppendValue(str, value);\n    };\n    Patcher.prototype.processStringAppendSlice = function () {\n        var left = this.read();\n        var right = this.read();\n        var str = this.outputString();\n        var val = this.inputEntry().value;\n        this.model.stringAppendSlice(str, val, left, right);\n    };\n    return Patcher;\n}());\n\n//# sourceMappingURL=internal-patcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/internal-patcher.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/simple-patcher.js":
/*!********************************************************!*\
  !*** ./node_modules/mendoza/lib/esm/simple-patcher.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPatch\": function() { return /* binding */ applyPatch; }\n/* harmony export */ });\n/* harmony import */ var _internal_patcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal-patcher */ \"./node_modules/mendoza/lib/esm/internal-patcher.js\");\n/* harmony import */ var _utf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utf8 */ \"./node_modules/mendoza/lib/esm/utf8.js\");\n\n\nvar Model = {\n    wrap: function (data) {\n        return data;\n    },\n    finalize: function (b) {\n        if (Array.isArray(b)) {\n            return b;\n        }\n        else {\n            return b.data;\n        }\n    },\n    markChanged: function (value) {\n        return value;\n    },\n    objectGetKeys: function (value) {\n        return Object.keys(value);\n    },\n    objectGetField: function (value, key) {\n        return value[key];\n    },\n    arrayGetElement: function (value, idx) {\n        return value[idx];\n    },\n    copyObject: function (value) {\n        var res = {\n            type: 'object',\n            data: {}\n        };\n        if (value !== null) {\n            for (var _i = 0, _a = Object.entries(value); _i < _a.length; _i++) {\n                var _b = _a[_i], key = _b[0], val = _b[1];\n                res.data[key] = val;\n            }\n        }\n        return res;\n    },\n    copyArray: function (value) {\n        if (value === null)\n            return [];\n        return value.slice();\n    },\n    copyString: function (value) {\n        return {\n            type: 'string',\n            data: value === null ? '' : value\n        };\n    },\n    objectSetField: function (target, key, value) {\n        target.data[key] = value;\n    },\n    objectDeleteField: function (target, key) {\n        delete target.data[key];\n    },\n    arrayAppendValue: function (target, value) {\n        target.push(value);\n    },\n    arrayAppendSlice: function (target, source, left, right) {\n        target.push.apply(target, source.slice(left, right));\n    },\n    stringAppendSlice: function (target, source, left, right) {\n        var sourceString = source;\n        var leftPos = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8resolveIndex)(sourceString, left);\n        var rightPos = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8resolveIndex)(sourceString, right, leftPos);\n        target.data += sourceString.slice(leftPos, rightPos);\n    },\n    stringAppendValue: function (target, value) {\n        target.data += value;\n    }\n};\n// Applies a patch on a JavaScript object.\nfunction applyPatch(left, patch) {\n    var root = left; // No need to wrap because the representation is the same.\n    var patcher = new _internal_patcher__WEBPACK_IMPORTED_MODULE_1__.Patcher(Model, root, patch);\n    return patcher.process();\n}\n//# sourceMappingURL=simple-patcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21lbmRvemEvbGliL2VzbS9zaW1wbGUtcGF0Y2hlci5qcz9iNjg0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNIO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxnQkFBZ0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHNCQUFzQix1REFBZ0I7QUFDdEMsdUJBQXVCLHVEQUFnQjtBQUN2QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxvQkFBb0I7QUFDcEIsc0JBQXNCLHNEQUFPO0FBQzdCO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9tZW5kb3phL2xpYi9lc20vc2ltcGxlLXBhdGNoZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXRjaGVyIH0gZnJvbSAnLi9pbnRlcm5hbC1wYXRjaGVyJztcbmltcG9ydCB7IHV0ZjhyZXNvbHZlSW5kZXggfSBmcm9tICcuL3V0ZjgnO1xudmFyIE1vZGVsID0ge1xuICAgIHdyYXA6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH0sXG4gICAgZmluYWxpemU6IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiLmRhdGE7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1hcmtDaGFuZ2VkOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgb2JqZWN0R2V0S2V5czogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgfSxcbiAgICBvYmplY3RHZXRGaWVsZDogZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlW2tleV07XG4gICAgfSxcbiAgICBhcnJheUdldEVsZW1lbnQ6IGZ1bmN0aW9uICh2YWx1ZSwgaWR4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVtpZHhdO1xuICAgIH0sXG4gICAgY29weU9iamVjdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXMgPSB7XG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIGRhdGE6IHt9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5lbnRyaWVzKHZhbHVlKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIGtleSA9IF9iWzBdLCB2YWwgPSBfYlsxXTtcbiAgICAgICAgICAgICAgICByZXMuZGF0YVtrZXldID0gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSxcbiAgICBjb3B5QXJyYXk6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIHJldHVybiB2YWx1ZS5zbGljZSgpO1xuICAgIH0sXG4gICAgY29weVN0cmluZzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGRhdGE6IHZhbHVlID09PSBudWxsID8gJycgOiB2YWx1ZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgb2JqZWN0U2V0RmllbGQ6IGZ1bmN0aW9uICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0LmRhdGFba2V5XSA9IHZhbHVlO1xuICAgIH0sXG4gICAgb2JqZWN0RGVsZXRlRmllbGQ6IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgICAgICBkZWxldGUgdGFyZ2V0LmRhdGFba2V5XTtcbiAgICB9LFxuICAgIGFycmF5QXBwZW5kVmFsdWU6IGZ1bmN0aW9uICh0YXJnZXQsIHZhbHVlKSB7XG4gICAgICAgIHRhcmdldC5wdXNoKHZhbHVlKTtcbiAgICB9LFxuICAgIGFycmF5QXBwZW5kU2xpY2U6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgbGVmdCwgcmlnaHQpIHtcbiAgICAgICAgdGFyZ2V0LnB1c2guYXBwbHkodGFyZ2V0LCBzb3VyY2Uuc2xpY2UobGVmdCwgcmlnaHQpKTtcbiAgICB9LFxuICAgIHN0cmluZ0FwcGVuZFNsaWNlOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UsIGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHZhciBzb3VyY2VTdHJpbmcgPSBzb3VyY2U7XG4gICAgICAgIHZhciBsZWZ0UG9zID0gdXRmOHJlc29sdmVJbmRleChzb3VyY2VTdHJpbmcsIGxlZnQpO1xuICAgICAgICB2YXIgcmlnaHRQb3MgPSB1dGY4cmVzb2x2ZUluZGV4KHNvdXJjZVN0cmluZywgcmlnaHQsIGxlZnRQb3MpO1xuICAgICAgICB0YXJnZXQuZGF0YSArPSBzb3VyY2VTdHJpbmcuc2xpY2UobGVmdFBvcywgcmlnaHRQb3MpO1xuICAgIH0sXG4gICAgc3RyaW5nQXBwZW5kVmFsdWU6IGZ1bmN0aW9uICh0YXJnZXQsIHZhbHVlKSB7XG4gICAgICAgIHRhcmdldC5kYXRhICs9IHZhbHVlO1xuICAgIH1cbn07XG4vLyBBcHBsaWVzIGEgcGF0Y2ggb24gYSBKYXZhU2NyaXB0IG9iamVjdC5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVBhdGNoKGxlZnQsIHBhdGNoKSB7XG4gICAgdmFyIHJvb3QgPSBsZWZ0OyAvLyBObyBuZWVkIHRvIHdyYXAgYmVjYXVzZSB0aGUgcmVwcmVzZW50YXRpb24gaXMgdGhlIHNhbWUuXG4gICAgdmFyIHBhdGNoZXIgPSBuZXcgUGF0Y2hlcihNb2RlbCwgcm9vdCwgcGF0Y2gpO1xuICAgIHJldHVybiBwYXRjaGVyLnByb2Nlc3MoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbXBsZS1wYXRjaGVyLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/simple-patcher.js\n");

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/utf8.js":
/*!**********************************************!*\
  !*** ./node_modules/mendoza/lib/esm/utf8.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"utf8charSize\": function() { return /* binding */ utf8charSize; },\n/* harmony export */   \"utf8stringSize\": function() { return /* binding */ utf8stringSize; },\n/* harmony export */   \"utf8resolveIndex\": function() { return /* binding */ utf8resolveIndex; },\n/* harmony export */   \"commonPrefix\": function() { return /* binding */ commonPrefix; },\n/* harmony export */   \"commonSuffix\": function() { return /* binding */ commonSuffix; }\n/* harmony export */ });\nfunction utf8charSize(code) {\n    if (code >> 16) {\n        return 4;\n    }\n    else if (code >> 11) {\n        return 3;\n    }\n    else if (code >> 7) {\n        return 2;\n    }\n    else {\n        return 1;\n    }\n}\nfunction utf8stringSize(str) {\n    var b = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code = str.codePointAt(i);\n        var size = utf8charSize(code);\n        if (size == 4)\n            i++;\n        b += size;\n    }\n    return b;\n}\n/** Converts an UTF-8 byte index into a UCS-2 index. */\nfunction utf8resolveIndex(str, idx, start) {\n    if (start === void 0) { start = 0; }\n    var byteCount = start;\n    var ucsIdx = 0;\n    for (ucsIdx = start; byteCount < idx; ucsIdx++) {\n        var code = str.codePointAt(ucsIdx);\n        var size = utf8charSize(code);\n        if (size === 4)\n            ucsIdx++; // Surrogate pair.\n        byteCount += size;\n    }\n    return ucsIdx;\n}\nfunction commonPrefix(str, str2) {\n    var len = Math.min(str.length, str2.length);\n    var b = 0;\n    for (var i = 0; i < len;) {\n        var aPoint = str.codePointAt(i);\n        var bPoint = str2.codePointAt(i);\n        if (aPoint !== bPoint)\n            return b;\n        var size = utf8charSize(aPoint);\n        b += size;\n        i += size === 4 ? 2 : 1;\n    }\n    return b;\n}\nfunction commonSuffix(str, str2, prefix) {\n    if (prefix === void 0) { prefix = 0; }\n    var len = Math.min(str.length, str2.length) - prefix;\n    var b = 0;\n    for (var i = 0; i < len;) {\n        var aPoint = str.codePointAt(str.length - 1 - i);\n        var bPoint = str2.codePointAt(str2.length - 1 - i);\n        if (aPoint !== bPoint)\n            return b;\n        var size = utf8charSize(aPoint);\n        b += size;\n        i += size === 4 ? 2 : 1;\n    }\n    return b;\n}\n//# sourceMappingURL=utf8.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21lbmRvemEvbGliL2VzbS91dGY4LmpzP2M5N2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsNEJBQTRCLFlBQVk7QUFDeEM7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL3V0ZjguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdXRmOGNoYXJTaXplKGNvZGUpIHtcbiAgICBpZiAoY29kZSA+PiAxNikge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZSA+PiAxMSkge1xuICAgICAgICByZXR1cm4gMztcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZSA+PiA3KSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHV0ZjhzdHJpbmdTaXplKHN0cikge1xuICAgIHZhciBiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY29kZSA9IHN0ci5jb2RlUG9pbnRBdChpKTtcbiAgICAgICAgdmFyIHNpemUgPSB1dGY4Y2hhclNpemUoY29kZSk7XG4gICAgICAgIGlmIChzaXplID09IDQpXG4gICAgICAgICAgICBpKys7XG4gICAgICAgIGIgKz0gc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIGI7XG59XG4vKiogQ29udmVydHMgYW4gVVRGLTggYnl0ZSBpbmRleCBpbnRvIGEgVUNTLTIgaW5kZXguICovXG5leHBvcnQgZnVuY3Rpb24gdXRmOHJlc29sdmVJbmRleChzdHIsIGlkeCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICB2YXIgYnl0ZUNvdW50ID0gc3RhcnQ7XG4gICAgdmFyIHVjc0lkeCA9IDA7XG4gICAgZm9yICh1Y3NJZHggPSBzdGFydDsgYnl0ZUNvdW50IDwgaWR4OyB1Y3NJZHgrKykge1xuICAgICAgICB2YXIgY29kZSA9IHN0ci5jb2RlUG9pbnRBdCh1Y3NJZHgpO1xuICAgICAgICB2YXIgc2l6ZSA9IHV0ZjhjaGFyU2l6ZShjb2RlKTtcbiAgICAgICAgaWYgKHNpemUgPT09IDQpXG4gICAgICAgICAgICB1Y3NJZHgrKzsgLy8gU3Vycm9nYXRlIHBhaXIuXG4gICAgICAgIGJ5dGVDb3VudCArPSBzaXplO1xuICAgIH1cbiAgICByZXR1cm4gdWNzSWR4O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1vblByZWZpeChzdHIsIHN0cjIpIHtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgc3RyMi5sZW5ndGgpO1xuICAgIHZhciBiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjspIHtcbiAgICAgICAgdmFyIGFQb2ludCA9IHN0ci5jb2RlUG9pbnRBdChpKTtcbiAgICAgICAgdmFyIGJQb2ludCA9IHN0cjIuY29kZVBvaW50QXQoaSk7XG4gICAgICAgIGlmIChhUG9pbnQgIT09IGJQb2ludClcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB2YXIgc2l6ZSA9IHV0ZjhjaGFyU2l6ZShhUG9pbnQpO1xuICAgICAgICBiICs9IHNpemU7XG4gICAgICAgIGkgKz0gc2l6ZSA9PT0gNCA/IDIgOiAxO1xuICAgIH1cbiAgICByZXR1cm4gYjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21tb25TdWZmaXgoc3RyLCBzdHIyLCBwcmVmaXgpIHtcbiAgICBpZiAocHJlZml4ID09PSB2b2lkIDApIHsgcHJlZml4ID0gMDsgfVxuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBzdHIyLmxlbmd0aCkgLSBwcmVmaXg7XG4gICAgdmFyIGIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOykge1xuICAgICAgICB2YXIgYVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KHN0ci5sZW5ndGggLSAxIC0gaSk7XG4gICAgICAgIHZhciBiUG9pbnQgPSBzdHIyLmNvZGVQb2ludEF0KHN0cjIubGVuZ3RoIC0gMSAtIGkpO1xuICAgICAgICBpZiAoYVBvaW50ICE9PSBiUG9pbnQpXG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgdmFyIHNpemUgPSB1dGY4Y2hhclNpemUoYVBvaW50KTtcbiAgICAgICAgYiArPSBzaXplO1xuICAgICAgICBpICs9IHNpemUgPT09IDQgPyAyIDogMTtcbiAgICB9XG4gICAgcmV0dXJuIGI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGY4LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/utf8.js\n");

/***/ }),

/***/ "./node_modules/throttle-debounce/cjs/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/throttle-debounce/cjs/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {number}    delay -          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {boolean}   [noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset).\n * @param  {Function}  callback -       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {boolean}   [debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function}  A new, throttled, function.\n */\nfunction throttle (delay, noTrailing, callback, debounceMode) {\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel() {\n    clearExistingTimeout();\n    cancelled = true;\n  } // `noTrailing` defaults to falsy.\n\n\n  if (typeof noTrailing !== 'boolean') {\n    debounceMode = callback;\n    callback = noTrailing;\n    noTrailing = undefined;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      /*\n       * In throttle mode, if `delay` time has been exceeded, execute\n       * `callback`.\n       */\n      exec();\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {number}   delay -         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {boolean}  [atBegin] -     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback -      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @returns {Function} A new, debounced function.\n */\n\nfunction debounce (delay, atBegin, callback) {\n  return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n}\n\nexports.debounce = debounce;\nexports.throttle = throttle;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/throttle-debounce/cjs/index.js\n");

/***/ })

}]);